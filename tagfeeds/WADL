<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>WADL</title>
    <category label="WADL"/>
    <updated>2015-04-13T08:57:12.545+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>Dynamic WADL with CDI</title>
        <category label="WADL"/>
        <category label="CDI"/>
        <category label="JAXRS"/>
        <published>2014-04-08T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/04/08/dynamic-wadl-with-cdi.html&gt;Dynamic WADL with CDI&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-04-08 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
The WADL (Web Application Definition Language) is used to
describe HTTP-based applications which means that JAXRS
applications can and are described by that. Typically it is
generated (static or dynamic) with the jersey maven
plugin (detailed informations can
be found &lt;a href="https://wikis.oracle.com/display/Jersey/WADL"&gt;here&lt;/a&gt;).
But for some reason i could not use either maven nor the jersey plugin.
So i had to do it on my own and used it as a little finger exercise.
The main goal was to achieve dynamic wadl generation for a JAXRS application.

The working steps were relativly easy:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Create a JAXB-Model from the current WADL-Specification&lt;/li&gt;
    &lt;li&gt;Create a CDI-Based design for JAXRS resources&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
    In the end you only have to provide a producer class which creates a @Wadl Class[] and inject an instance of @Wadl &amp;nbsp;@WadlApplication.&lt;br /&gt;
    &lt;br /&gt;
&lt;pre class="brush: java"&gt;@Path("/")
public class MyResource
{
 @Inject
 @Wadl
 @WadlApplication
 Instance&amp;lt;Application&amp;gt; applicationInstance;

 @GET
 @Produces(MediaType.APPLICATION_XML)
 public Application getRoot(@Context UriInfo uriInfo)
 {
  return getWadl(uriInfo);
 }
}
&lt;/pre&gt;
    &lt;br /&gt;
    &amp;nbsp;As a simple example assume that you have a TinkerForge MasterBrick connected to a RaspberryPi. Addionally you want to provide a JAXRS-Resource for every connected sensor. With the sample code below you are now able to extend the WADL dynmically.&lt;br /&gt;
    &lt;br /&gt;
&lt;pre class="brush: java"&gt;public class WadlClassProducer
{
 @Inject
 @SensorAnno
 @Any
 Instance&amp;lt;SensorResource&amp;gt; sensorInstances;

 @Produces
 @Wadl
 public Class[] create()
 {
  List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzList = new ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;();
  for (SensorResource sensor : sensorInstances)
  {
   clazzList.add(sensor.getResourceClass());
  }
  return clazzList.toArray(new Class[0]);
 }
}
&lt;/pre&gt;
    &lt;br /&gt;
    The sources can be found&amp;nbsp;&lt;a href="https://bitbucket.org/abischof/wadlpoc" target="_blank"&gt;here&lt;/a&gt;.&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
