<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>IoT</title>
    <category label="IoT"/>
    <updated>2014-11-07T16:41:36.596+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>Our new project: Lego® Mindstorms® M1ndSuite</title>
        <category label="EV3"/>
        <category label="IoT"/>
        <category label="Lego"/>
        <category label="M1ndsuite"/>
        <category label="M2M"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <published>2013-12-16T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2013/12/16/our-new-project--lego®-mindstorms®-m1n.html&gt;Our new project: Lego® Mindstorms® M1ndSuite&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2013-12-16 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
*drum roll*..............Voila! Today we officially announce our new project called &lt;b&gt;M1ndSuite&lt;/b&gt;. It will be developed parallel to our cdi-commons project.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;h2&gt;
        What is it / What is it going to be?&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;
    In general:&amp;nbsp;&lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;(or "M1ndSuite") will be a gui- (web-)application for controlling and/or monitoring Lego® Mindstorms® robots.&lt;br /&gt;
    &lt;br /&gt;
    For those, who don't know what Lego® Mindstorms® is: The official &lt;a href="http://www.lego.com/en-gb/mindstorms/products/ev3/31313/"&gt;website &lt;/a&gt;says:&lt;br /&gt;
    &lt;blockquote class="tr_bq"&gt;
        &lt;span style="background-color: white; color: #63696a; font-family: verdana; font-size: 12px;"&gt;LEGO® MINDSTORMS® EV3 has arrived! Combining the versatility of the LEGO building system with the most advanced technology we’ve ever developed, unleash the creative powers of the new LEGO MINDSTORMS EV3 set to create and command Robots that walk, talk, think and do anything you can imagine. Follow the step-by-step 3D building instructions to create TRACK3R, R3PTAR, SPIK3R, EV3RSTORM and GRIPP3R and bring them to life with an easy, intuitive and icon-based programming interface.&lt;/span&gt;&lt;/blockquote&gt;
    Sounds cool, doesn't it?&lt;br /&gt;
    &lt;br /&gt;
    Image what you could create with all those possilities! Or look what others already did :-D&lt;br /&gt;
    &lt;br /&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://img.youtube.com/vi/MQvG6IgrgYQ/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&amp;nbsp;&amp;nbsp;&lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://img.youtube.com/vi/tSXTirkNrCA/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
    &lt;br /&gt;
    &lt;div&gt;
        But let's come back to our planned &lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;application. At this juncture we can't tell what will be the &lt;b&gt;definite &lt;/b&gt;features because we first have to become acquainted with the whole subject. But &lt;u&gt;possible features&lt;/u&gt; might be:&lt;br /&gt;
        &lt;ul&gt;
            &lt;li&gt;offering pre-built programs for different robots&lt;/li&gt;
            &lt;li&gt;possibility to create new (persistent) programs for any robot (like with the official Lego software) and real-time transfer of these into the robot's operating system&lt;/li&gt;
            &lt;li&gt;real-time monitoring of the robot's sensors / motors / ...&lt;/li&gt;
            &lt;li&gt;real-time control for the robot (e.g. "move forward/backward", "turn left/right", "play sound xyz" ...)&lt;/li&gt;
        &lt;/ul&gt;
        We can imagine &lt;b&gt;plenty &lt;/b&gt;of features, but (as already said) at this early moment we first have to get deeper into the topic. Our Mindstorm hardware just arrived on friday and we have just done our first experiments (we have built the Lego Mindstorm robot Gripp3r and loaded the standard Lego programs for it onto the EV3 brick so we could remote control it with the infrared remote control).&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        What frameworks will be used?&lt;/h2&gt;
    &lt;div&gt;
        Well, of course nothing is certain at this moment (we don't even have certain features xD) but chances are good that the (web-)application will use the spring framework.&lt;/div&gt;
    &lt;div&gt;
        There is already a java API for creating programs for the robots called LeJOS (&lt;a href="http://www.lejos.org/"&gt;http://www.lejos.org/&lt;/a&gt;). We're pretty sure that we will use that to realize the communication between the MindSuite and the robots.&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        Why are we doing this?&lt;/h2&gt;
    &lt;div&gt;
        Everyone is talking about the topics M2M (Machine-to-Machine) / IoT (Internet of Things) at the moment. We are very excited about these topics, too! And we love the idea behind Lego Mindstorms with all its possibilities! So creating a new software for controlling and monitoring those robots seems to be the perfect chance for us to get into that stuff. We can't wait to get started!&lt;br /&gt;
        &lt;br /&gt;
        As always with our projects, MindSuite will be open source and its code will be hosted on bitbucket. You will find the code at&amp;nbsp;&lt;a href="https://bitbucket.org/rapidpm/m1ndsuite"&gt;https://bitbucket.org/rapidpm/m1ndsuite&lt;/a&gt;,&amp;nbsp;but at this moment you won't find anything there of course. Give us some weeks ( or months? :) )..we don't have a roadmap yet. But we will regularly post updates on our blog to keep you informed of the current state, be curious! :D&lt;br /&gt;
        &lt;br /&gt;
        &lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s1600/mindsuite1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="81" src="http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s320/mindsuite1.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;first logo concept&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s1600/DSCN0564%5B1%5D.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="240" src="http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s320/DSCN0564%5B1%5D.JPG" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;we already built one of the Lego Mindstorms (Gripp3r)&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IoT with Java8 and TinkerForge Part 1</title>
        <category label="IoT"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="TinkerForge"/>
        <published>2014-01-13T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/01/13/iot-with-java8-and-tinkerforge-part-1.html&gt;IoT with Java8 and TinkerForge Part 1&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-01-13 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
IoT is something cool, but I think you know it already.&lt;br /&gt;
Today I started with TinkerForge.
TinkerForge is a german company that are building electronic elements. You can put them together like LEGO.
This means, that you don´t need any special electronic stuff or knowledge.
&lt;br /&gt;
And the best, you can code plain Java to use them.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;But how we can start?
&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
First of all, you need a MasterBrick and at minimumm one sensor. For my first experiment I am using
the simple temperature sensor. After unpacking it I needed around 3 min to put all together.
After this you can plug it into your USB port. Now the hardware part is ready.
&lt;br /&gt;
&lt;br /&gt;
To speak with this components you have to install two things.&lt;br /&gt;
First the usb-driver, that is used for the communication with the MasterBrick,&lt;br /&gt;
second the BrickViewr. With this you can check the installation, update the firmware and so on.
&lt;br /&gt;
&lt;br /&gt;
You will find the software for&lt;b&gt; linux/osx/windows&lt;/b&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Hello IoT World:&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
We will start with the first HelloWorld. Here with the Hello IoTWorld.&lt;br /&gt;
After you connected the MasterBrick with the USB-port you will see a blue light
and the MasterBrick will be ready for communication.
&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://1.bp.blogspot.com/-L4kMEQNQn7U/UtRZqJ_UlPI/AAAAAAABVGA/q_UgrGaqkdQ/s1600/SvenRuppert_IoT_TinkerForge_001_BrickV_001.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-L4kMEQNQn7U/UtRZqJ_UlPI/AAAAAAABVGA/q_UgrGaqkdQ/s1600/SvenRuppert_IoT_TinkerForge_001_BrickV_001.jpg" height="140" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
Now we could start the BrickViewer to check the installation.
The importand part is the UID from the sensor. With this we can connect it later.
After you pressed the connect button, you can see all the informations.
&lt;br /&gt;
&lt;br /&gt;
At &lt;a href="https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge"&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt; are all source codes you will need, including the TinkerForge API itself.&lt;br /&gt;
I spoke with TinkerForge and we decided to put the API into maven.&lt;br /&gt;
&lt;br /&gt;
After we have done this, I will inform you.
If you are interested, follow me on Twitter please ( &lt;b&gt;&lt;a href="https://twitter.com/SvenRuppert"&gt;@SvenRuppert&lt;/a&gt;&lt;/b&gt; )
&lt;br /&gt;
&lt;br /&gt;
The basic steps are quite simple to use this sensor.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;create a IPConnection&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;create an instance of the class BrickletTemperature&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;configure the sensor&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;add an ActionListener.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
That is all.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.IPConnection;

public class ExampleCallback {
    private static final String host = "localhost";
    private static final int port = 4223;
    private static final String UID = "dXj"; 
    public static void main(String args[]) throws Exception {
        IPConnection ipcon = new IPConnection(); 
        BrickletTemperature temp = new BrickletTemperature(UID, ipcon); 
        ipcon.connect(host, port); 
        temp.setTemperatureCallbackPeriod(1000);
        temp.addTemperatureListener(new 
          BrickletTemperature.TemperatureListener() {
            public void temperature(short temperature) {
                System.out.println("Temperature: " 
                   + temperature/100.0 + " °C");
            }
        });
        ipcon.disconnect();
    }
}
&lt;/pre&gt;
After this short example we could do our first javafx test.
We want to check the temperature over some time and show this inside an LineChart.&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://2.bp.blogspot.com/-q7AnTcjRQz4/UtRaLcWsJFI/AAAAAAABVGI/lUAYpFuc87g/s1600/SvenRuppert_IoT_TinkerForge_001_Temp_001.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-q7AnTcjRQz4/UtRaLcWsJFI/AAAAAAABVGI/lUAYpFuc87g/s1600/SvenRuppert_IoT_TinkerForge_001_Temp_001.jpg" height="199" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Here we are... and please note, the DateAxis is from&lt;a href="http://myjavafx.blogspot.de/2013/09/javafx-charts-display-date-values-on.html"&gt; http://myjavafx.blogspot.de/2013/09/javafx-charts-display-date-values-on.html&lt;/a&gt;&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
 public class HelloTinkerForge extends Application {

    private static final String host = "localhost";
    private static final int port = 4223;
    private static final String UID = "dXj"; 


    public static void main(String args[]) throws Exception {
        launch(args);
    }

    public static XYChart.Series series;

    @Override
    public void start(Stage stage) {
        stage.setTitle("Line Chart TinkerForge Sample");
        final DateAxis dateAxis = new DateAxis();
        final NumberAxis yAxis = new NumberAxis();
        dateAxis.setLabel("Time of Temp");
        final LineChart&lt;date number=""&gt; lineChart
    = new LineChart&amp;lt;&amp;gt;(dateAxis, yAxis);

    lineChart.setTitle("Temp Monitoring");

    series = new XYChart.Series();
    series.setName("My temps");
    final ObservableList seriesData = series.getData();

    lineChart.getData().add(series);
    Scene scene = new Scene(lineChart, 800, 600);
    stage.setScene(scene);
    stage.show();
    new Worker(seriesData).start();

    }

    public static class Worker extends Thread {
    final ObservableList seriesData;
    public Worker(final ObservableList seriesData) {
    setDaemon(true);
    setName("Thread Temp");
    this.seriesData = seriesData;
    }

    @Override
    public void run() {
    Platform.runLater(new Runnable() {
    @Override
    public void run() {
    IPConnection ipcon = new IPConnection();
    BrickletTemperature temp
    = new BrickletTemperature(UID, ipcon);
    try {
    ipcon.connect(host, port);
    temp.setTemperatureCallbackPeriod(1000);
    temp.addTemperatureListener(
    new BrickletTemperature.TemperatureListener() {
    public void temperature(short temperature) {
    Platform.runLater(new Runnable() {
    @Override
    public void run() {
    final double temp
    = temperature / 100.0;
    final int counter
    = seriesData.size() + 1;
    final XYChart.Data data
    = new XYChart.Data(
    new Date(), temp);
    seriesData.add(data);
    }
    });
    }
    });
    } catch (IOException |
    AlreadyConnectedException |
    TimeoutException |
    NotConnectedException e) {
    e.printStackTrace();
    }
    }
    });
    }
    }
    }
&lt;/date&gt;&lt;/pre&gt;
&lt;pre class="brush: java"&gt;&lt;date number=""&gt;
&lt;/date&gt;&lt;/pre&gt;
Short and simple.. Well this is a simple example, but the next step will be with more sensor-elements...&lt;br /&gt;
&amp;nbsp;stay tuned..  and happy coding.
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IoT with Java8 and TinkerForge Part 2</title>
        <category label="IoT"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="TinkerForge"/>
        <published>2014-01-20T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/01/20/iot-with-java8-and-tinkerforge-part-2.html&gt;IoT with Java8 and TinkerForge Part 2&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-01-20 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
One of the interesting features of &lt;a href="http://www.tinkerforge.com/"&gt;TinkerForge&lt;/a&gt; is the possibility to
put different elements like sensors, physical buttons, and more on a MasterBrick&lt;br /&gt;
&lt;br /&gt;
This is what we want to do today.
&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Barometer&lt;/b&gt;&lt;br /&gt;
Today we are using the &lt;a href="http://www.tinkerforge.com/en/doc/Hardware/Bricklets/Barometer.html"&gt;Barometer-Bricklet&lt;/a&gt;.
The Barometer Bricklet can be used to extend the features of Bricks
by the capability to measure air pressure in range of 10 to 1200mbar
with a resolution of 0.012mbar. The measurement is temperature
compensated internally. The Bricklet is equipped with
a MS5611-01BA01 sensor which is designed to be used as an altimeter, too.
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;At &lt;a href="https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge"&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt; are all source codes you will need, including the TinkerForge API itself.
    I spoke with TinkerForge and we decided to put the API into maven. After we have done this, I will inform you.
    If you are interested, follow me on Twitter please ( &lt;b&gt;@SvenRuppert&lt;/b&gt; )
&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
The most interesting part for us today will be the presents of two sensors inside of one Bricklet.&lt;br /&gt;
How we can handle it and how we will get the data to the screen?&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Connect to n - Sensor-units&lt;/b&gt;&lt;br /&gt;
To remember... To connect to a sensor you need an instance of the representing class.
To get the value from the sensor you have to implement an ActionListener.
Here the short example from my last blog about TinkerForge. &lt;i&gt;(&lt;a href="http://www.rapidpm.org/2014/01/iot-with-java8-and-tinkerforge-part-1.html"&gt;engl&lt;/a&gt; /&lt;a href="http://jaxenter.de/artikel/Internet-of-Things-mit-Java-8-und-TinkerForge-Teil-1-170511"&gt; ger&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.IPConnection;
public class ExampleCallback {
  private static final String host = "localhost";
  private static final int port = 4223;
  private static final String UID = "dXj";
  public static void main(String args[]) throws Exception {
    IPConnection ipcon = new IPConnection();
    BrickletTemperature temp = new BrickletTemperature(UID, ipcon);
    ipcon.connect(host, port);
    temp.setTemperatureCallbackPeriod(1000);
    temp.addTemperatureListener(new
    BrickletTemperature.TemperatureListener() {
      public void temperature(short temperature) {
        System.out.println("Temperature: "
        + temperature/100.0 + " °C");
      }
    });
    ipcon.disconnect();
}
}
&lt;/pre&gt;
The same will be with the two sensor-units inside the Barometer-Bricklet.
The class name will be BrickletBarometer, and you have to implement two ActionListeners.
One for the air-pressure called AirPressureListener and one for the altitude called AltitudeListener.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class ExampleCallback {
    private static final String host = "localhost";
    private static final int port = 4223;
    private static final String UID = "jY4";

    public static void main(String args[]) throws Exception {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);
        ipcon.connect(host, port);
        b.setAirPressureCallbackPeriod(1000);
        b.setAltitudeCallbackPeriod(1000);
        b.addAirPressureListener(
                new BrickletBarometer.AirPressureListener() {
                    public void airPressure(int airPressure) {
                        System.out.println("Air Pressure: "
                                + airPressure / 1000.0 + " mbar");
                    }
                }
        );
        b.addAltitudeListener(new BrickletBarometer.AltitudeListener() {
            public void altitude(int altitude) {
                System.out.println("Altitude: " + altitude / 100.0 + " m");
            }
        });
        ipcon.disconnect();
    }
}
&lt;/pre&gt;
&lt;b&gt;Connection to JavaFX&lt;/b&gt;&lt;br /&gt;
The connection to JavaFX could be simple. The basic steps are always the same.
You have to start an Thread outside our JavaFX GUI Thread. Inside this thread you have to configure the sensor
and inside the run()- method you have to add the action listener.
All steps that are manipulating the GUI, you have to start again inside a Platform.runLater()
Now, we have to sensor-units. This means that we are doing this twice.
To reuse the code later, we are extracting it into an separate class.
If we would do it for the temperature sensor we used last time, it will look like the following.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class Temp implements Runnable {

  private String UID;
  private ObservableList seriesData;

  public Temp(final String UID, final XYChart.Series series) {
      this.UID = UID;
      this.seriesData = series.getData();
  }

  @Override
  public void run() {
      IPConnection ipcon = new IPConnection();
      BrickletTemperature temp = new BrickletTemperature(UID, ipcon);
      try {
          ipcon.connect(Barometer.host, Barometer.port);
          temp.setTemperatureCallbackPeriod(1000);
          temp.addTemperatureListener(new BrickletTemperature.TemperatureListener() {
              public void temperature(short temperature) {
                  Platform.runLater(new Runnable() {
                      @Override
                      public void run() {
                          final double temp = temperature / 100.0;
                          System.out.println("Temperature: " + temp + " °C");
                          final XYChart.Data data = new XYChart.Data(new Date(), temp);
                          seriesData.add(data);
       }
                  });
              }
          });
      } catch (IOException 
       | AlreadyConnectedException 
    | TimeoutException 
    | NotConnectedException e) {
          e.printStackTrace();
      }
  }
}
&lt;/pre&gt;
For the Barometer-Bricklet I was writing two classes. One for the airpressure and one for the altitude.
Both are identically, with one difference. The implementation of the ActionListener.
Every sensor will put his data to a separate LineChart.&lt;br /&gt;
&amp;nbsp;This implementation is not perfect, because we are not disconnecting
from the sensor in the end, and for one Bricklet we have two representing classes.
Both instances are in a different thread.
But this is still running over a longer period. (at least a few days with my laptop)
How to encapsulate this in better way we will see in one of my next posts.

&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class Altitude implements Runnable {

    private String UID;
    private ObservableList seriesData;

    public Altitude(final String UID, final XYChart.Series series) {
        this.UID = UID;
        this.seriesData = series.getData();
    }

    @Override
    public void run() {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);

        try {
            ipcon.connect(Barometer.host, Barometer.port);
            b.setAirPressureCallbackPeriod(1000);
            b.addAltitudeListener(new BrickletBarometer.AltitudeListener() {
                public void altitude(int altitude) {
                    System.out.println("Altitude: " + altitude / 100.0 + " m");
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            final double temp = altitude / 100.0;
                            final XYChart.Data data = new XYChart.Data(new Date(), temp);
                            seriesData.add(data);
                        }
                    });
                }
            });
        } catch (IOException | AlreadyConnectedException | TimeoutException | NotConnectedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class Airpressure implements Runnable {

    private String UID;
    private ObservableList seriesData;

    public Airpressure(final String UID, final XYChart.Series series) {
        this.UID = UID;
        this.seriesData = series.getData();
    }

    @Override
    public void run() {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);

        try {
            ipcon.connect(Barometer.host, Barometer.port);
            b.setAirPressureCallbackPeriod(1000);
            b.addAirPressureListener(new BrickletBarometer.AirPressureListener() {
                public void airPressure(int airPressure) {
                    System.out.println("Air Pressure: " + airPressure / 1000.0 + " mbar");
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            final double temp = airPressure / 1000.0 ;
                            final XYChart.Data data = new XYChart.Data(new Date(), temp);
                            seriesData.add(data);
                        }
                    });
                }
            });
        } catch (IOException 
     | AlreadyConnectedException 
     | TimeoutException 
     | NotConnectedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/pre&gt;
Putting all together we will get the following main.

&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class Barometer extends Application {
    public static final String host = "localhost";
    public static final int port = 4223;


    public static void main(String args[]) throws Exception {
        launch(args);
    }

    public static XYChart.Series seriesTemp = new XYChart.Series();
    public static XYChart.Series seriesAirpressure = new XYChart.Series();
    public static XYChart.Series seriesAltitude = new XYChart.Series();

    @Override
    public void start(Stage stage) {
        stage.setTitle("Line Chart TinkerForge Sample");

        final VBox box = new VBox();
        seriesTemp.setName("Temp");
        seriesAirpressure.setName("Airpressure");
        seriesAltitude.setName("Altitude");

        final ObservableList&lt;node&gt; boxChildren = box.getChildren();
        boxChildren.add(createLineChart("Temp", seriesTemp));
        boxChildren.add(createLineChart("Airpressure", seriesAirpressure));
        boxChildren.add(createLineChart("Altitude", seriesAltitude));

        Scene scene = new Scene(box, 2000, 1500);

        stage.setScene(scene);
        stage.show();
        Platform.runLater(new Temp("dXj", seriesTemp));
        Platform.runLater(new Airpressure("jY4", seriesAirpressure));
        Platform.runLater(new Altitude("jY4", seriesAltitude));
        }

        private LineChart createLineChart(final String chartName,final XYChart.Series series ){
        final DateAxis dateAxis = new DateAxis();
        dateAxis.setLabel("Time");
        final NumberAxis yAxis = new NumberAxis();

        final LineChart&lt;date number=""&gt; lineChart = new LineChart&amp;lt;&amp;gt;(dateAxis, yAxis);
            lineChart.setTitle(chartName);
            lineChart.getData().add(series);

            return lineChart;
            }
            }
        &lt;/date&gt;&lt;/node&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;i&gt;At&amp;nbsp;&lt;a href="https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge"&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt;&amp;nbsp;are all source codes you will need, including the TinkerForge API itself. I spoke with TinkerForge and we decided to put the API into maven. After we have done this, I will inform you. If you are interested, follow me on Twitter please (&amp;nbsp;&lt;b&gt;@SvenRuppert&lt;/b&gt;&amp;nbsp;)&lt;/i&gt;&lt;br /&gt;
&lt;i&gt;&lt;br /&gt;&lt;/i&gt;
Short and simple.. as always ..
But if we are using more sensors in a way like this, we will get performance problems.
To solve this we are connecting different &lt;b&gt;NoSQL&lt;/b&gt; systems soon. And we have to build the next version of JavaFX GUI-Elements...
.... stay tuned..  and happy coding.

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Raspberry Wildfly Cluster for less than 300EUR</title>
        <category label="IoT"/>
        <category label="JBoss"/>
        <category label="JDK8"/>
        <category label="Raspberry PI"/>
        <category label="Wildfly"/>
        <published>2014-02-13T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/13/raspberry-wildfly-cluster-for-less-tha.html&gt;Raspberry Wildfly Cluster for less than 300EUR&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-13 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
So WildFly 8 is final now.&lt;br /&gt;
In this article i like to show how you can create a development/testing wildly cluster with raspberry pis and only one power supply.&lt;br /&gt;
&lt;br /&gt;
I have bought:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;5x Raspberry Pis (Model B) with Wireless USB-Adapters&lt;/li&gt;
    &lt;li&gt;1x 10-Port USB 2.0 Hub&lt;/li&gt;
    &lt;li&gt;5x USB to Micro USB Adpapter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" height="400" width="300" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
The Raspberries are configured with Raspbian Wheezy (wlan auto), JDK 8 and Wildfly 8 Final.&lt;br /&gt;
&lt;div&gt;
    In this combination you have to remove the '-server' from the domain.sh otherwise WildFly won't start.&lt;/div&gt;
&lt;br /&gt;
The WildFly Configuration can be made within 5 minutes.&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Master&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Create management user admin (./add-user.sh)&lt;/li&gt;
        &lt;li&gt;Create a management slave user for each of your pi slaves (./add-user.sh)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Remember the secret value at the end of this process for each slave (e.g.&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&amp;lt;secret value="MTIzNDU=" /&amp;gt;&lt;/span&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to the public interface (e.g. 192.168.0.103)&amp;nbsp;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;li&gt;Slave&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Configure host.xml with the slave name of 1.1&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;host name="slave1" xmlns="urn:jboss:domain:2.0"&amp;gt;&lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Configure the server identity&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;server-identities&amp;gt;
                &amp;lt;secret value="MTIzNDU="/&amp;gt;
                &amp;lt;/server-identities&amp;gt;
            &lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to master and public interface (e.g. 192.168.0.104)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;To simply the typing i have written a small script that takes the master-ip and the bind-ip&lt;/li&gt;
&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&lt;pre&gt;#MasterAdress
MASTER_ADDRESS=$1

# Bind Addresses
BIND_ADDRESS=$2

JBOSS_BIND_ADDRESS_MANAGEMENT=$BIND_ADDRESS
JBOSS_BIND_ADDRESS=$BIND_ADDRESS
JBOSS_BIND_ADDRESS_UNSECURE=$BIND_ADDRESS

sudo ./domain.sh -Djboss.bind.address.unsecure=$JBOSS_BIND_ADDRESS_UNSECURE -Djboss.bind.address.management=$BOSS_BIND_ADDRESS_MANAGEMENT -Djboss.bind.address=$JBOSS_BIND_ADDRESS -Djboss.domain.master.address=$MASTER_ADDRESS&lt;/pre&gt;
&lt;/span&gt;

        &lt;/ul&gt;
    &lt;/ol&gt;
&lt;/ol&gt;
Ready. Now you can deploy any archive either to main-server-group (just a domain) or other-server-group (full cluster).&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
