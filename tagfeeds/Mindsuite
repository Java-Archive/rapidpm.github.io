<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mindsuite</title>
    <category label="Mindsuite"/>
    <updated>2015-07-15T16:35:12.836+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Marco Ebbinghaus</name>
    </author>
    <entry>
        <title>Our new project: Lego Mindstorms M1ndSuite</title>
        <category label="EV3"/>
        <category label="IoT"/>
        <category label="Lego"/>
        <category label="M1ndsuite"/>
        <category label="M2M"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <published>2013-12-16T00:00:00+01:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2013/12/16/our-new-project--lego-mindstorms-m1nds.html&gt;Our new project: Lego Mindstorms M1ndSuite&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2013-12-16 from &lt;a href="/team/marco-ebbinghaus/"&gt;Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
*drum roll*..............Voila! Today we officially announce our new project called &lt;b&gt;M1ndSuite&lt;/b&gt;. It will be developed parallel to our cdi-commons project.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;h2&gt;
        What is it / What is it going to be?&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;
    In general:&amp;nbsp;&lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;(or "M1ndSuite") will be a gui- (web-)application for controlling and/or monitoring Lego® Mindstorms® robots.&lt;br /&gt;
    &lt;br /&gt;
    For those, who don't know what Lego® Mindstorms® is: The official &lt;a href="http://www.lego.com/en-gb/mindstorms/products/ev3/31313/"&gt;website &lt;/a&gt;says:&lt;br /&gt;
    &lt;blockquote class="tr_bq"&gt;
        &lt;span style="background-color: white; color: #63696a; font-family: verdana; font-size: 12px;"&gt;LEGO® MINDSTORMS® EV3 has arrived! Combining the versatility of the LEGO building system with the most advanced technology we’ve ever developed, unleash the creative powers of the new LEGO MINDSTORMS EV3 set to create and command Robots that walk, talk, think and do anything you can imagine. Follow the step-by-step 3D building instructions to create TRACK3R, R3PTAR, SPIK3R, EV3RSTORM and GRIPP3R and bring them to life with an easy, intuitive and icon-based programming interface.&lt;/span&gt;&lt;/blockquote&gt;
    Sounds cool, doesn't it?&lt;br /&gt;
    &lt;br /&gt;
    Image what you could create with all those possilities! Or look what others already did :-D&lt;br /&gt;
    &lt;br /&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://img.youtube.com/vi/MQvG6IgrgYQ/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&amp;nbsp;&amp;nbsp;&lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://img.youtube.com/vi/tSXTirkNrCA/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
    &lt;br /&gt;
    &lt;div&gt;
        But let's come back to our planned &lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;application. At this juncture we can't tell what will be the &lt;b&gt;definite &lt;/b&gt;features because we first have to become acquainted with the whole subject. But &lt;u&gt;possible features&lt;/u&gt; might be:&lt;br /&gt;
        &lt;ul&gt;
            &lt;li&gt;offering pre-built programs for different robots&lt;/li&gt;
            &lt;li&gt;possibility to create new (persistent) programs for any robot (like with the official Lego software) and real-time transfer of these into the robot's operating system&lt;/li&gt;
            &lt;li&gt;real-time monitoring of the robot's sensors / motors / ...&lt;/li&gt;
            &lt;li&gt;real-time control for the robot (e.g. "move forward/backward", "turn left/right", "play sound xyz" ...)&lt;/li&gt;
        &lt;/ul&gt;
        We can imagine &lt;b&gt;plenty &lt;/b&gt;of features, but (as already said) at this early moment we first have to get deeper into the topic. Our Mindstorm hardware just arrived on friday and we have just done our first experiments (we have built the Lego Mindstorm robot Gripp3r and loaded the standard Lego programs for it onto the EV3 brick so we could remote control it with the infrared remote control).&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        What frameworks will be used?&lt;/h2&gt;
    &lt;div&gt;
        Well, of course nothing is certain at this moment (we don't even have certain features xD) but chances are good that the (web-)application will use the spring framework.&lt;/div&gt;
    &lt;div&gt;
        There is already a java API for creating programs for the robots called LeJOS (&lt;a href="http://www.lejos.org/"&gt;http://www.lejos.org/&lt;/a&gt;). We're pretty sure that we will use that to realize the communication between the MindSuite and the robots.&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        Why are we doing this?&lt;/h2&gt;
    &lt;div&gt;
        Everyone is talking about the topics M2M (Machine-to-Machine) / IoT (Internet of Things) at the moment. We are very excited about these topics, too! And we love the idea behind Lego Mindstorms with all its possibilities! So creating a new software for controlling and monitoring those robots seems to be the perfect chance for us to get into that stuff. We can't wait to get started!&lt;br /&gt;
        &lt;br /&gt;
        As always with our projects, MindSuite will be open source and its code will be hosted on bitbucket. You will find the code at&amp;nbsp;&lt;a href="https://bitbucket.org/rapidpm/m1ndsuite"&gt;https://bitbucket.org/rapidpm/m1ndsuite&lt;/a&gt;,&amp;nbsp;but at this moment you won't find anything there of course. Give us some weeks ( or months? :) )..we don't have a roadmap yet. But we will regularly post updates on our blog to keep you informed of the current state, be curious! :D&lt;br /&gt;
        &lt;br /&gt;
        &lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s1600/mindsuite1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="81" src="http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s320/mindsuite1.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;first logo concept&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s1600/DSCN0564%5B1%5D.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="240" src="http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s320/DSCN0564%5B1%5D.JPG" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;we already built one of the Lego Mindstorms (Gripp3r)&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Developing leJOS programs with IntelliJ on Windows</title>
        <category label="0.5.0"/>
        <category label="EV3"/>
        <category label="IntelliJ"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <category label="windows"/>
        <published>2013-12-27T00:00:00+01:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2013/12/27/developing-lejos-programs-with-intelli.html&gt;Developing leJOS programs with IntelliJ on Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2013-12-27 from &lt;a href="/team/marco-ebbinghaus/"&gt;Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
&lt;a href="http://www.lejos.org/"&gt;LeJOS&lt;/a&gt; is the java library which is needed to develop and run java programs on Lego Mindstorms robots. Four days ago, the newest alpha version 0.5.0 was released. One big new feature is an all new gui-menu which is displayed on the LCD-Display for executing programs on the brick without executing a remote command (via telnet or SSH).&lt;br /&gt;
&lt;br /&gt;
The official guides use eclipse as the IDE for developing lejos programs and in this tutorial I want to explain how to develop programs with IntelliJ on Windows. I will also show how to transfer finished programs to the brick and execute it via remote connection and via the new display menu.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    Initial situation &lt;/h2&gt;
&lt;br /&gt;
You have created the bootable MicroSD-Card for running Lejos (version 0.5.0-alpha) on the Mindstorms brick and inserted it into the brick (a tutorial on how to create is can be found &lt;a href="http://sourceforge.net/p/lejos/wiki/Creating%20a%20bootable%20SD%20card/"&gt;here&lt;/a&gt;. Recognize that the procedure has changed from version 0.4.0-alpha to 0.5.0-alpha). You also have a compatible WiFi-Stick (e.g. Netgear WNA1100) which is inserted into the USB-Plug on the brick.&lt;br /&gt;
&lt;br /&gt;
So let's start. What we will do is:&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Clone the official lejos git repository to get the sources which we need to build our program&lt;/li&gt;
    &lt;li&gt;Create and configure the IntelliJ-Project for our lejos program&lt;/li&gt;
    &lt;li&gt;Write the code for the program (the usual HelloWorld from the official guide)&lt;/li&gt;
    &lt;li&gt;Create a runnable JAR-File of the program&lt;/li&gt;
    &lt;li&gt;Transfer the JAR-File onto the brick via WiFi / SSH&lt;/li&gt;
    &lt;li&gt;Execute the program via the new display menu&lt;/li&gt;
    &lt;li&gt;Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
    1 Clone the official lejos git repository to get the sources which we need to build our program&lt;/h3&gt;
For cloning the lejos git repository you must have installed git (which can be obtained from &lt;a href="http://git-scm.com/download/win"&gt;here&lt;/a&gt;). For comfort (not having to use single git commands on the command line) we used the free-to-use (for non-commercial use) GUI-Tool SmartGitHg 5
(version 5.0.5) by syntevo which rocks and can be downloaded on the &lt;a href="http://www.syntevo.com/smartgithg/"&gt;official site&lt;/a&gt;. When you start the program for the first time you have to tell SmartGitHg where your git installation is located, but thats quite straight-forward and the wizard will help you doing that. After you have started and configured SmartGitHg choose:&lt;br /&gt;
"Project" --&amp;gt; "Clone ..."&lt;br /&gt;
Then choose:&lt;br /&gt;
"Remote Git, Mercurial or Subversion Repository" and enter git://git.code.sf.net/p/lejos/ev3 into the textfield.&lt;br /&gt;
Then click "Next". In the next window make sure both check boxes are checked. Click "Next" again. Choose a path where the source should be copied to (We chose the path "F:\projects\ev3-sources" which we will call EV3-SOURCES by now). Then click "Next" again. On the last window choose the option "Open in new project" and leave the name in the textfield as it is. Finally press "Finish". SmartGitHg will then start downloading all files from the repository. This might need some minutes. You can watch the progress in the right bottom corner of the window.&lt;br /&gt;
After the download has finished the window should look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s1600/smartgit.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="346" src="http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s640/smartgit.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;SmartGitHg, downloaded EV3-sources&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
At last we have to choose the 0.5.0-alpha tag branch. Choose "Branch" --&amp;gt; "Checkout...". In the following window choose the 0.5.0-alpha tag branch as shown in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s1600/checkout.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="427" src="http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s640/checkout.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;checking out the 0.5.0-alpha tag branch&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Press "Check out" and then choose "Check out commit without switching to a branch".&lt;br /&gt;
&lt;br /&gt;
Now that we have the lejos sources in version 0.5.0-alpha let's start creating our IntelliJ project for our HelloWorld-Program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    2 Create and configure the IntelliJ-Project for our lejos program&lt;/h3&gt;
Start IntelliJ and choose: "File" --&amp;gt; "New Project...". Choose "Java Module" and call it HelloWorld. We saved it in "F:\projects\HelloWorld" (which I will call HELLOWORLD by now). Then press "Next" and "Finish".&lt;br /&gt;
&lt;br /&gt;
Now that we have a raw new project, lets first configure it before creating the HelloWorld-code. Open the project settings ("File"--&amp;gt;"Project Structure") and click on "modules". Then click on "Add Content Root" and choose EV3-SOURCES\ev3-classes\src and click on "OK". Do the same with EV3-SOURCES\DBusJava\src.&lt;br /&gt;
As next click on "Librarys" on the "Project Structure"-window. Click on the green "+" and choose "Java". Then choose the folder EV3-SOURCES\ev3-classes\lib and click on "OK". Click on "OK" again.&lt;br /&gt;
Press "Apply" and "OK" to close the project structure window now.&lt;br /&gt;
Your project structure should now look like this:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s1600/projectstructure.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="212" src="http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s400/projectstructure.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Project structure&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;
    3 Write the code for the program&lt;/h3&gt;
Now let's create the code. Create a class in HelloWorld\src and call it "Main". Make it look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.Button;
import lejos.hardware.lcd.LCD;

public class Main {
&amp;nbsp;&amp;nbsp;&amp;nbsp; public static void main(String[] args) {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.drawString("First EV3 Program", 0, 5);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Button.waitForAnyPress();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.refresh();

&amp;nbsp;&amp;nbsp;&amp;nbsp; }
}
&amp;nbsp;&lt;/pre&gt;
If the imports fail, something went wrong with the configuration of the project structure.&lt;br /&gt;
&lt;br /&gt;
As you can see the class implements the Main-method. It will show "First EV3 Program" on the display of your EV3-Brick until you press any button on the brick.&lt;br /&gt;
&lt;br /&gt;
That's it. Now we are ready to create a runnable JAR of our program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    4 Create a runnable JAR-File of the program&lt;/h3&gt;
Open the project settings again ("File" --&amp;gt; "Project Structure..."). Click on "Artifacts".Click on the green "+" and choose "Jar" --&amp;gt; "From modules with dependencies...". Leave everything as it is in the new window but enter "Main" into the field "Main Class" like in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s1600/jarfile.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="247" src="http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s400/jarfile.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Creating jar-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Then click on "OK". Click on "Apply" and close the Project Structure-Window. Now we need to do one last thing before creating our ready-to-execute Jar. There is a new folder in your HelloWorld-src folder called "META-INF". It contains a MANIFEST.MF-File. It contains two lines as you can see in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s1600/manifest.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="206" src="http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s400/manifest.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;MANIFEST-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Now you need to add the following line:&lt;br /&gt;
Class-Path: /home/root/lejos/lib/ev3classes.jar /home/root/lejos/libjna/usr/share/java/jna.jar&lt;br /&gt;
&lt;br /&gt;
You can copy/paste that line because the paths are absolute paths on the MicroSD-card.&lt;br /&gt;
&lt;br /&gt;
That's it. Save everything and choose "Build"--&amp;gt;"Build artifacts..."--&amp;gt;HelloWorld.jar--&amp;gt;"build". If you get some warnings that's okay. If you get errors anything went wrong (let us know). Now we have created a Jar-File (in HELLOWORLD\out\artifacts\HelloWorld_jar) which we can transfer via WiFi to the EV3-Brick.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    5 Transfer the JAR-File onto the brick via WiFi / SSH&lt;/h3&gt;
To transfer the jar-file from our workstation to the EV3-Brick we need a connection to it. So start your EV3 with the lejos-MicroSD-card and the WiFi-Stick inserted. Make sure that your robot has an IP-Adress in your network. A description on how this is done via the menu can be found &lt;a href="http://sourceforge.net/p/lejos/wiki/Configuring%20Wifi/"&gt;here&lt;/a&gt; (that didn't work for us, so we had to edit the file /etc/wpa_supplicant.conf on the microSD-card by hand).&lt;br /&gt;
&lt;br /&gt;
Now that our EV3 is online and connected to the WiFi we will transfer the jar-file onto the robot. Therefore we need to download pscp.exe from &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;. We downloaded it to "C:\Users\Marco\Downloads".&lt;br /&gt;
Open up a cmd-box (Windows-Button --&amp;gt; enter "cmd", then choose cmd.exe) and navigate to the folder which contains the downloaded pscp.exe. Then enter the following command:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;blockquote class="tr_bq"&gt;
    pscp -scp HELLOWORLD\out\artifacts\HelloWorld_jar\HelloWorld.jar root@IP_OF_EV3:/home/lejos/programs&lt;/blockquote&gt;
&lt;br /&gt;
&lt;br /&gt;
If you are asked for the root password just hit enter. The root user on the linux-system on the microSD card has no password. In my case that looked like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s1600/cmd.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="171" src="http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s640/cmd.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;transfering the jar-file onto the brick&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
That's it! The file now was copied onto the EV3-brick (in /home/lejos/programs). Time to execute our program.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    6 Execute the program via the new display menu&lt;/h3&gt;
On the display menu move to "Files" (by pressing the right button). Press "Enter" (the middle button). Now you will see "HelloWorld.jar" on the display. Press "Enter" again. Now you will see "Execute Program" on the display. Press "Enter" once more and enjoy the magic :). It will need some seconds where you will only see a blank display. But then the "First EV3 Program" will be displayed as expected. When you press any button the program will end as expected and you will be back at the menu. Congratulations for running your lejos program developed with IntelliJ on Windows!&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    7 Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/h3&gt;
Sometimes you might want to run your programs which you uploaded onto the brick remotely instead of pressing buttons on the brick. One solution for this is to use a ssh connection via putty. So&amp;nbsp; download it from &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt; (putty.exe). After downloading, execute the putty.exe. Enter the IP of your EV3 into the field "Host Name (or IP address)" and click on "Open". This will open a remote console. Enter "root" as user name and just press enter when asked for password. Now you could run your program. But we have to do one more thing before executing the program: We have to disable the menu. If we wouldn't do this, both (the String "First EV3 Program" of our program AND the display menu) would be displayed in the display. So in the menu navigate to "System" and select "Suspend Menu". The menu will now be suspended and the display will be blank. Now back to our remote console. Enter the following command to execute the program (which we transfered to /home/lejos/programs on the brick earlier):&lt;br /&gt;
&lt;blockquote class="tr_bq"&gt;
    jrun -cp /home/lejos/programs/HelloWorld.jar Main&lt;/blockquote&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s1600/putty.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="402" src="http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s640/putty.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;remote console in putty&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
Look at the display and enjoy the magic again ;). It will again need some seconds until you will see the string on the display. Hit any button on the brick to end the program. If you want the menu back after executing the program press the middle button and the lower button on the brick. The display menu will be back instantly.&lt;br /&gt;
&lt;br /&gt;
If you have any questions or problems during the process feel free to leave a comment.
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Infrared Sensor - Part 2</title>
        <category label="0.5.0"/>
        <category label="components"/>
        <category label="EV3"/>
        <category label="infrared"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <category label="remote control"/>
        <category label="sensor"/>
        <published>2014-02-10T00:00:00+01:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/10/lego-mindstorms-ev3-components--infrar.html&gt;Lego Mindstorms EV3 Components: Infrared Sensor - Part 2&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-10 from &lt;a href="/team/marco-ebbinghaus/"&gt;Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
In this second part on the mindstorm's infrared sensor we will focus on the remote control and the ability of the remote sensor to recognize commands from that remote control respectively. There are multiple buttons on that remote control and we will control the robot by pressing different buttons.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The robot&lt;/h2&gt;
We will use the robot from the first part as it already uses the infrared sensor. The mindstorm's remote control looks like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://4.bp.blogspot.com/--ykPdzdmwGY/Uvd2Sls9PTI/AAAAAAAAAL8/l5i7epxq6rA/s1600/DSCN06462.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/--ykPdzdmwGY/Uvd2Sls9PTI/AAAAAAAAAL8/l5i7epxq6rA/s1600/DSCN06462.jpg" height="320" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
There are two buttons on the left (red) and two buttons on the right (blue). There is a fifth button at the top center which is (in contrast to all other buttons) a toggling button. So if you press it one time, the remote control sends a signal continuously until the button is pressed a second time. Before taking the photo I pressed that button one time to activate the green signal led. We will use that toggle button on the next part of the infrared sensor articles.&lt;br /&gt;
The red slider at the bottom center is for selecting a frequency channel. You can select four channels and the current channel is shown in the red circle under the toggling button.&lt;br /&gt;
&lt;h2&gt;
    The parcours&lt;/h2&gt;
There is the robot and there is the remote control. The aim is to press different buttons on the remote control to control and move the robot. We will use the two buttons on the left to let the robot rotate left/right, respectively the two buttons on the right to let the robot move forwards/backwards. When more than one button is pressed, the program should exit.&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://3.bp.blogspot.com/-2hiF0vwZ5s0/Uvd2J57BhCI/AAAAAAAAAL0/nvAubN0xv3c/s1600/parcours.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-2hiF0vwZ5s0/Uvd2J57BhCI/AAAAAAAAAL0/nvAubN0xv3c/s1600/parcours.jpg" height="240" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2&gt;
    The infrared sensor API&lt;/h2&gt;
There are two relevant modes for the infrared sensor. The distance mode and the seek mode. We used the former implicitly in the last article and we will use it in this one because it offers the possibility to receive commands from the infrared remote control. The latter can be used to receive the position and the distance of the remote control to the robot (the next tutorial will use the seek mode).&lt;br /&gt;
&lt;br /&gt;
It's very easy to receive a command from the remote control. The only method we will use is infraredSensor.getRemoteCommand(0);&lt;br /&gt;
This will return an integer value which represents the pressed button on the remote control (e.g. the left upper button on the remote control will return 1). The parameter of the method is also an integer value which represents the frequency channel which we use on the remote control. You can select one of four different channels (via the red slider on the remote control). In this case we use channel 0 (which is called channel 1 on the remote control).&lt;br /&gt;
&lt;br /&gt;
That's it. We don't need RangeFinderAdaptors, RangeFeatureDetectors or anything like that this time. So let's directly jump to the finished code and see how it works.&lt;br /&gt;
&lt;h2&gt;
    The code &lt;/h2&gt;
There are two classes. The Main-class and an InfraredSignalCheckerThread, which extends Thread and contains the logic for received commands from the remote control.&lt;br /&gt;
&lt;br /&gt;
Let's start with the Main-Class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.Button;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {

    protected final static double NINETY_DEGREES = 90.0;
    protected final static double PILOT_SPEED = 100.0;
    protected final static int PILOT_ACCELERATION = 500;
    protected final static double WHEEL_DIAMETER = 30.0f;
    protected final static double DISTANCE_BETWEEN_WHEELS = 170.0;

    public static void main(String[] args) throws InterruptedException {

        final DifferentialPilot pilot = new DifferentialPilot(WHEEL_DIAMETER, DISTANCE_BETWEEN_WHEELS, Motor.C, Motor.B);
        final EV3IRSensor infraredSensor = new EV3IRSensor(SensorPort.S2);
        final InfraredSignalCheckerThread checkerThread = new InfraredSignalCheckerThread(infraredSensor, pilot);

        configurePilot(pilot);
        checkerThread.start();
        Button.waitForAnyPress();
    }

    private static void configurePilot(final DifferentialPilot pilot) {
        pilot.setAcceleration(PILOT_ACCELERATION);
        pilot.setRotateSpeed(PILOT_SPEED);
        pilot.setTravelSpeed(PILOT_SPEED);
    }
}
&lt;/pre&gt;
&lt;br /&gt;
If you've (hopefully) read our &lt;a href="http://www.rapidpm.org/2014/01/lego-mindstorms-ev3-components-infrared.html"&gt;last article&lt;/a&gt; on the infrared sensor, you will recognize that the Main-class became a bit smaller this time. We don't have to configure anything on the infrared sensor.&lt;br /&gt;
First we create instances for the pilot and the infrared sensor again. The new thing is the InfraredSignalCheckerThread which extends Thread. This class contains all the logic for received commands. The logic is implemented in a Thread-extending class because we want to listen continuously for any received commands. The created instance of the InfraredSignalCheckerThread needs the infraredSensor-object of course and it needs the pilot (because we will control/move the robot corresponding to the pressed button on the remote control).&lt;br /&gt;
&lt;br /&gt;
After we created the instances we configure the pilot and start the checkerThread. That's it. Let's have a look at the InfraredSignalCheckerThread-class now.&lt;br /&gt;
&lt;br /&gt;
The InfraredSignalCheckerThread-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.navigation.DifferentialPilot;

public class InfraredSignalCheckerThread extends Thread {

    private EV3IRSensor infraredSensor;
    private DifferentialPilot pilot;

    public InfraredSignalCheckerThread(final EV3IRSensor infraredSensor, final DifferentialPilot pilot){
        this.infraredSensor = infraredSensor;
        this.pilot = pilot;
    }

    @Override
    public void run() {
        while(true){
            final int remoteCommand = infraredSensor.getRemoteCommand(0);
            switch (remoteCommand){
                case 0:
                    pilot.quickStop();
                    break;
                case 1:
                    pilot.rotateLeft();
                    break;
                case 2:
                    pilot.rotateRight();
                    break;
                case 3:
                    pilot.forward();
                    break;
                case 4:
                    pilot.backward();
                    break;
                default:
                    System.out.println("button combination pressed..exiting...");
                    System.exit(0);
            }
        }
    }
}
&lt;/pre&gt;
&lt;br /&gt;
Let's have a look at the run-method. As you can see we have an infinite loop. In that loop we get an integer command from the method infraredSensor.getRemoteCommand(0). The given parameter (0) means that the infrared sensor should listen at frequency channel 0 (remember the red slider on the remote control for selecting a channel).&lt;br /&gt;
So now the thread is checking for any commands on channel 0 continuously. As next we check which command was sent. The different buttons send different integer values. Here is the documentation from within the EV3IRSensor-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;/** The button values are:
* 1 TOP-LEFT
* 2 BOTTOM-LEFT
* 3 TOP-RIGHT
* 4 BOTTOM-RIGHT
* 5 TOP-LEFT + TOP-RIGHT
* 6 TOP-LEFT + BOTTOM-RIGHT
* 7 BOTTOM-LEFT + TOP-RIGHT
* 8 BOTTOM-LEFT + BOTTOM-RIGHT
* 9 CENTRE/BEACON
* 10 BOTTOM-LEFT + TOP-LEFT
* 11 TOP-RIGHT + BOTTOM-RIGHT
* (0 means no buttons pressed)
*/&lt;/pre&gt;
&lt;br /&gt;
So, as you can see if no button is pressed on the remote control the method will return 0. The four buttons we want to use return 1, 2, 3 and 4.&lt;br /&gt;
Knowing these return values the switch statement becomes very easy to understand. If no button is pressed the robot shouldn't move. If the top left button is pressed the robot should rotate to the left and so on, we just call the corresponding methods of the DifferentialPilot-class to control the motors. If more than one button is pressed at a time the program should exit.&lt;br /&gt;
&lt;h2&gt;
    The result&lt;/h2&gt;
And here is the result (watch on youtube for better quality):&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="https://i1.ytimg.com/vi/Bco7R93tYv0/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="https://www.youtube.com/v/Bco7R93tYv0?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="https://www.youtube.com/v/Bco7R93tYv0?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Some words on complications that I had while writing the program: After starting the CheckerThread I had to wait around 30 seconds before pressing a button on the remote control. I have no explaination for that but when I pressed any button earlier the robot moved very jerkily. I tried different workarounds like Thread.sleep() and Delay.ms() in the main-method and the checker-thread. I also tried a timer in the CheckerThread which printed a message on the console to tell the user that the program isn't yet ready if he tried to press any button during those first 30 seconds. But none of these attempts worked. 
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
