<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>motors</title>
    <category label="motors"/>
    <updated>2015-05-05T23:51:40.222+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Marco Ebbinghaus</name>
    </author>
    <entry>
        <title>Lego Mindstorms EV3 Components: Motors - Part 1</title>
        <category label="0.5.0"/>
        <category label="components"/>
        <category label="EV3"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="motors"/>
        <published>2014-01-11T00:00:00+01:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/01/11/lego-mindstorms-ev3-components--motors.html&gt;Lego Mindstorms EV3 Components: Motors - Part 1&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-01-11 from &lt;a href="/team/marco-ebbinghaus/"&gt;Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;
With this posting I will start a series of articles where I explain which components/sensors are contained in the Lego Mindstorms EV3-set an how to work with them.&lt;br /&gt;
&lt;br /&gt;
In this posting I will start with one of the most basic components - the motors. The Mindstorms-set includes three motors: two of the same size and a smaller one.&lt;br /&gt;
&lt;br /&gt;
Both types work the same way and so they have the same api-methods.&lt;br /&gt;
&lt;br /&gt;
I will build a simple program were I let the robot perform some movements to different directions.&lt;br /&gt;
&lt;br /&gt;
Before we can start developing, we first need a robot which we will control with the program. I built a simple robot for that. It consists of only one single component connected to the brick: One of the bigger motors. There are two wheels plugged into the motor and two more wheels which aren't connected to the motor and just work as stabilization. Here are some pics:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://4.bp.blogspot.com/-gJ0BPfi2Pb0/Us6us3v_eeI/AAAAAAAAAIk/EenQtF2MY7M/s1600/DSCN0594.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-gJ0BPfi2Pb0/Us6us3v_eeI/AAAAAAAAAIk/EenQtF2MY7M/s1600/DSCN0594.JPG" height="240" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://1.bp.blogspot.com/-lGWCS5TqS3s/Us6uusRK-GI/AAAAAAAAAIs/mEk-cZr8jKg/s1600/DSCN0596.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-lGWCS5TqS3s/Us6uusRK-GI/AAAAAAAAAIs/mEk-cZr8jKg/s1600/DSCN0596.JPG" height="240" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://1.bp.blogspot.com/-Lp-Hs7-z_nw/Us6uzYNSw6I/AAAAAAAAAI8/eLNfIbfRkEg/s1600/DSCN0597.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-Lp-Hs7-z_nw/Us6uzYNSw6I/AAAAAAAAAI8/eLNfIbfRkEg/s1600/DSCN0597.JPG" height="320" width="240" /&gt;&lt;/a&gt;
&lt;a href="http://1.bp.blogspot.com/-4mXFS9dCiYg/Us6u4bC5xlI/AAAAAAAAAJM/XT-HV-eSpSg/s1600/DSCN0599.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-4mXFS9dCiYg/Us6u4bC5xlI/AAAAAAAAAJM/XT-HV-eSpSg/s1600/DSCN0599.JPG" height="240" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;
( There are different ways at different abstract levels to control the motors, but I will use the most basic method by using the Motor-class directly in this first part. We couldn't use a more abstract method which enable features like driving turns or following paths because we only have a single motor connected to our robot here. So the robot can just move forwards and backwards. )&lt;br /&gt;
&lt;br /&gt;
I plugged the motor into plug connection B on the brick.&lt;br /&gt;
&lt;br /&gt;
So, now we are ready to develop the program for our new robot. I set up an IntelliJ-project as described in our posting about &lt;a href="http://www.rapidpm.org/2013/12/developing-lejos-programs-with-intellij.html"&gt;developing leJOS programs with IntelliJ on Windows&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
First, here is the plain code which is quite easy to understand:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {

        Motor.B.setAcceleration(200);
        Motor.B.setSpeed(90);
        Motor.B.rotate(360);
        Motor.B.setSpeed(180);
        Motor.B.rotate(360);
        Motor.B.setSpeed(360);
        Motor.B.rotate(360);
        Motor.B.backward();
        Delay.msDelay(3000);
        Motor.B.stop();

    }
}
&lt;/pre&gt;
What does that code do?&lt;br /&gt;
We address the motor in plug connection B via Motor.B. Then we set its acceleration to 200. The standard value is 6000 which means that the motor will accelerate by 6000 degrees per second per second. This is quite fast and so we lowered the value to 200 to get a smoother acceleration.&lt;br /&gt;
Then we set the speed of the motor to 90 degrees per second. After we "configured" the motor, we let it start rotating by 360 degrees. This operation is a blocking operation which means that the program will stop here until the motor rotated 360 degrees (which will be done after 4 seconds at the configured speed of 90 degrees per second).&lt;br /&gt;
After the motor rotated 360 degrees we double the speed to 180 degrees per second and let the motor rotate 360 degrees again. This time the motor will need half the time (2 seconds), of course.&lt;br /&gt;
After that the same happens again with a speed of 360 degrees per second.&lt;br /&gt;
Then, as the last part of the program, we call the backward-method. In contrast to the rotate-method, this method is non-blocking. That means, that the program will continue directly after calling that method, it won't wait till the backwards-movement is done (otherwise the motor wouldn't stop rotating anymore, there is no parameter for defining how long the motor should rotate). Recognize that there is also a rotate()-method with a second, boolean parameter. If you use that one with the boolean parameter = true the method becomes non-blocking like backward(). &lt;br /&gt;
In the next line we tell the program to do nothing for 3 seconds, the motor will of course continue rotating (at the speed which was set as last = 360 degrees per second) during that time. &lt;br /&gt;
Then after these 3 seconds we let the motor stop und the program is at its end.&lt;br /&gt;
&lt;br /&gt;
To get some feedback on what the robot is exactly doing through the program execution, we added some printlns to the console.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(200);
        
        Motor.B.setSpeed(90);
        System.out.println("Set speed to 90 degrees per second.");
        System.out.print("Rotating 360 degrees...");
        Motor.B.rotate(360);
        System.out.println("done!");
        
        Motor.B.setSpeed(180);
        System.out.println("Set speed to 180 degrees per second.");
        System.out.print("Rotating 360 degrees...");
        Motor.B.rotate(360);
        System.out.println("done!");
        
        Motor.B.setSpeed(360);
        System.out.println("Set speed to 360 degrees per second...");
        System.out.print("Rotating 360 degrees...");
        Motor.B.rotate(360);
        System.out.println("done!");
        
        Motor.B.backward();
        System.out.print("Now rotating backwards for 3s");
        Delay.msDelay(3000);
        System.out.print("...3s are over...");
        Motor.B.stop();
        System.out.println("and stopped!");

    }
}
&lt;/pre&gt;
That code looks better now, but there's tons of duplicate code. So we put the code for setting different speeds and letting the motor rotate in a function.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(200);

        rotateDegreesAtSpeed(360, 90);
        rotateDegreesAtSpeed(360, 180);
        rotateDegreesAtSpeed(360, 360);

        Motor.B.backward();
        System.out.print("Now rotating backwards for 3s");
        Delay.msDelay(3000);
        System.out.print("...3s are over...");
        Motor.B.stop();
        System.out.println("and stopped!");

    }

    private static void rotateDegreesAtSpeed(final int degreesToRotate, final int degreesPerSecond) {
        Motor.B.setSpeed(degreesPerSecond);
        System.out.println("Set speed to "+degreesPerSecond+ "degrees per second.");
        System.out.print("Rotating "+ degreesToRotate + "degrees...");
        Motor.B.rotate(degreesToRotate);
        System.out.println("done!");
    }
}&lt;/pre&gt;
&lt;br /&gt;
That was it. After transfering the program onto the brick (via WiFi) we executed the program. Here's a video of how the result looks like (console output readable in higher qualities).&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/qr14DFO60Tk/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="https://www.youtube.com/v/qr14DFO60Tk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="https://www.youtube.com/v/qr14DFO60Tk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Perfect. The next thing we did was extending the robot by a second motor - the smaller one. The result looked like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://1.bp.blogspot.com/-eNXOOaEsic0/Us6u60ZBzHI/AAAAAAAAAJY/q4p4IaTrQIM/s1600/DSCN0600.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-eNXOOaEsic0/Us6u60ZBzHI/AAAAAAAAAJY/q4p4IaTrQIM/s1600/DSCN0600.JPG" height="240" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://3.bp.blogspot.com/-SIUBBBpNqBk/Us6u9ehJ2VI/AAAAAAAAAJg/GP55djU9xZk/s1600/DSCN0601.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-SIUBBBpNqBk/Us6u9ehJ2VI/AAAAAAAAAJg/GP55djU9xZk/s1600/DSCN0601.JPG" height="240" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://1.bp.blogspot.com/-tEuoOrBUdaY/Us6u_wRN4EI/AAAAAAAAAJo/Bp31UBL3OtY/s1600/DSCN0602.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-tEuoOrBUdaY/Us6u_wRN4EI/AAAAAAAAAJo/Bp31UBL3OtY/s1600/DSCN0602.JPG" height="240" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;
So the second motor will make the three "razorblades" rotate ( some eyecandy :) ).&lt;br /&gt;
We put the second motor in plug connection A of the brick.&lt;br /&gt;
&lt;br /&gt;
The aim for that second motor should be: The razorblades should always rotate the same speed, the first motor has.&lt;br /&gt;
&lt;br /&gt;
So we extended our program. Here's the finished code:&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {

        final int ACCELERATION = 200;
        final int ONE_ROTATION = 360;
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(ACCELERATION);
        Motor.A.setAcceleration(ACCELERATION);

        Motor.A.forward();
        rotateDegreesAtSpeed(ONE_ROTATION, 90);
        rotateDegreesAtSpeed(ONE_ROTATION, 180);
        rotateDegreesAtSpeed(ONE_ROTATION, 360);

        Motor.A.backward();
        System.out.println("Switched Motor A from forward to backward. Waiting for the direction change.");
        Delay.msDelay(2000);
        Motor.B.backward();

        System.out.print("Now rotating backwards for 3s");
        Delay.msDelay(3000);
        System.out.print("...3s are over...");
        Motor.B.stop();
        Motor.A.stop();
        System.out.println("and stopped!");

    }

    private static void rotateDegreesAtSpeed(final int degreesToRotate, final int degreesPerSecond) {
        Motor.A.setSpeed(degreesPerSecond);
        Motor.B.setSpeed(degreesPerSecond);
        System.out.println("Set speed of motors to "+degreesPerSecond+ " degrees per second.");
        System.out.print("Rotating "+ degreesToRotate + " degrees...");
        Motor.B.rotate(degreesToRotate);
        System.out.println("done!");
    }
}&lt;/pre&gt;
At the beginning of the program we set the acceleration of motor A to 200, too. Then we call Motor.A.forward(), which is a non-blocking operation like the backward()-method. We added one line in the created function to set the speed for motor A which is the same as for motor B, of course. After the three function calls we first call bachwards() on motor A. This will make the motor stop as the first step, and then start rotating backwards in a second step. Recognize, that Motor.A.backward() will be called when motor B stopped rotating. To let the robot wait until motor A also stopped, we added a delay of two seconds. After these two seconds the robot will start turning backwards (motor B will rotate into the other direction). At the same time, motor A will start rotating in the other direction, too.&lt;br /&gt;
We will let the robot move backwards for three seconds and then stop both motors.&lt;br /&gt;
&lt;br /&gt;
So, here is the final result:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/F_TNtE2B6Lg/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="https://www.youtube.com/v/F_TNtE2B6Lg?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="https://www.youtube.com/v/F_TNtE2B6Lg?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
In the next article I will use the DifferentialPilot-class, which is the superior level of abstraction for controlling the motors, to move a two-wheeled robot which can drive turns for example.
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Motors - Part 2</title>
        <category label="0.5.0"/>
        <category label="EV3"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="motors"/>
        <published>2014-01-15T00:00:00+01:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/01/15/lego-mindstorms-ev3-components--motors.html&gt;Lego Mindstorms EV3 Components: Motors - Part 2&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-01-15 from &lt;a href="/team/marco-ebbinghaus/"&gt;Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
In the first article of the Mindstorms component series I showed the most basic way to control motors which are connected to the EV3-brick. We had a robot with 1 motor connected which made the robot move forwards and backwards and one smaller motor which let three razorblades rotate (for fun).&lt;br /&gt;
In this second part I will explain how to use the superior level of abstraction to control a robot with two motors (each motor moves one wheel). The lejos-crew calls these robots&amp;nbsp; "wheeled vehicles".&lt;br /&gt;
&lt;br /&gt;
So, first I built such a vehicle as shown in these pictures:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://2.bp.blogspot.com/-CLVVItozSsA/UtAEx0-SEeI/AAAAAAAAAJ0/UyaH9_YisiE/s1600/DSCN0607.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://2.bp.blogspot.com/-CLVVItozSsA/UtAEx0-SEeI/AAAAAAAAAJ0/UyaH9_YisiE/s1600/DSCN0607.JPG" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://2.bp.blogspot.com/-ZJrqRdjMP58/UtAE12wAQGI/AAAAAAAAAKE/RTdYKtIUBXI/s1600/DSCN0608.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://2.bp.blogspot.com/-ZJrqRdjMP58/UtAE12wAQGI/AAAAAAAAAKE/RTdYKtIUBXI/s1600/DSCN0608.JPG" width="320" /&gt;&lt;/a&gt;
&lt;a href="http://4.bp.blogspot.com/-ov-9G8prnC8/UtAEznnul6I/AAAAAAAAAJ8/zkag-CyIaZs/s1600/DSCN0609.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://4.bp.blogspot.com/-ov-9G8prnC8/UtAEznnul6I/AAAAAAAAAJ8/zkag-CyIaZs/s1600/DSCN0609.JPG" width="320" /&gt;&lt;/a&gt; &lt;a href="http://3.bp.blogspot.com/-6ubRga2G6lI/UtAE4SelCWI/AAAAAAAAAKM/yWMoaJ8Dfmc/s1600/DSCN0610.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://3.bp.blogspot.com/-6ubRga2G6lI/UtAE4SelCWI/AAAAAAAAAKM/yWMoaJ8Dfmc/s1600/DSCN0610.JPG" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;
(For the wheels I used the construction manual of the GRIPP3R-robot)&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    DifferentialPilot-class &lt;/h3&gt;
As said before, the DifferentialPilot class from the lejos api represents the superior level of abstraction when communicating with the motors. You can use it when you have a robot with two motors connected to the brick where each motor controls an own wheel.&lt;br /&gt;
&lt;br /&gt;
It offers different methods like travel(), steer() or arc() which will be used in the program for the robot.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    The parcours&lt;/h3&gt;
First, I thought of a little demonstration parcours for the new robot. It should contain simple movements for- and backwards, rotations and turns / circles. As a result the parcours consists of 3 parts:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://4.bp.blogspot.com/-5bk-C7htHhI/UtFh5xIWyDI/AAAAAAAAAKc/zIWe21XVy2g/s1600/parcours1.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="173" src="http://4.bp.blogspot.com/-5bk-C7htHhI/UtFh5xIWyDI/AAAAAAAAAKc/zIWe21XVy2g/s1600/parcours1.JPG" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
So, the first part of the parcours is pretty simple, the robot will move in a rectangular shape until it is back in its initial position.&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://1.bp.blogspot.com/-QTsrtvTwbEg/UtFh9A3Z-xI/AAAAAAAAAKk/3UmL59wUwLw/s1600/parcours2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="186" src="http://1.bp.blogspot.com/-QTsrtvTwbEg/UtFh9A3Z-xI/AAAAAAAAAKk/3UmL59wUwLw/s1600/parcours2.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
In the second part, the robot then will move 90° in a turn. After the turn it will then drive a 90° turn backwards after which the robot will be in the position indicated transparent in the picture.&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://4.bp.blogspot.com/-iaGSsTV-7XM/UtFh-Gkp3xI/AAAAAAAAAKo/8YEX_hwL4yw/s1600/parcours3.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="197" src="http://4.bp.blogspot.com/-iaGSsTV-7XM/UtFh-Gkp3xI/AAAAAAAAAKo/8YEX_hwL4yw/s1600/parcours3.JPG" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
At the end of the second part the robot will first move forwards a bit. Then it will move in a circle. After the circle has finished, the robot will rotate by 180° (and then look like transparent indication in the picture). Then the robot will move backwards until it is back in the initial position from the beginning of the parcours. &lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    The code &lt;/h3&gt;
Let's have a look at the plain code of the finished program first.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {
    public static void main(String[] args) {

        final DifferentialPilot pilot = new DifferentialPilot(30.0, 185.0, Motor.C, Motor.B);
        pilot.setAcceleration(200);
        pilot.setRotateSpeed(50.0);
        pilot.setTravelSpeed(50.0);

        pilot.travel(350.0);
        pilot.rotate(90.0);
        pilot.travel(190.0);
        pilot.rotate(90.0);
        pilot.travel(350.0);
        pilot.rotate(90.0);
        pilot.travel(190.0);
        pilot.rotate(90.0);

        pilot.steer(65.0, 90.0);
        pilot.steer(-65.0, 90.0);

        pilot.travel(175.0);
        pilot.arc(-100.0,-360.0);
        pilot.steer(200.0,180.0);
        pilot.travel(-175.0);

    }
}

&lt;/pre&gt;
&lt;br /&gt;
At the beginning we instantiate a new instance of a DifferentialPilot and configure the wanted movement speeds. The used constructor takes four parameters:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;wheel-diameter: The diameter of the wheel connected to the motor. The used wheel has a 30mm diameter.&lt;/li&gt;
    &lt;li&gt;track width: The distance between the centres of both wheels. In my case ~185mm.&lt;/li&gt;
    &lt;li&gt;left motor: The plug connection where the left motor is plugged in.&lt;/li&gt;
    &lt;li&gt;right motor: The plug connection where the right motor is plugged in.&lt;/li&gt;
&lt;/ul&gt;
The diameter of the wheels and the track width are needed by the api to know how long the motors must rotate to perform correct rotations etc.&lt;br /&gt;
&lt;br /&gt;
In the next block we perform the first part of the parcours which is pretty trivial. The travel-method makes the robot move forwards for the given distance (350mm). Recognize, that the distance unit must be the same as used for wheel diameter and track width in the constructor. That method is a blocking operation, so the program will wait here until the movement has finished. After that, the robot will rotate (in place) by 90° to the left (-90° would be&amp;nbsp; 90° right). This happens four times until the rectangular movement has finished and the robot is back in its initial position.&lt;br /&gt;
&lt;br /&gt;
In the next block there are to steer-method calls.&lt;br /&gt;
The steer()-method takes two parameters:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;turnRate: The ratio of the two wheels' speeds (Integer between -200 and +200)&lt;/li&gt;
    &lt;li&gt;angle: When the robot turned by this degrees, the steering will stop.&lt;/li&gt;
&lt;/ul&gt;
This needs some more explainations:&lt;br /&gt;
turnRate: If the value is positive you are configuring the left wheel, if it's negative you are configuring the right wheel. Let's look at some positive values:&lt;br /&gt;
0 - means, that both wheels will rotate at the same speed, which causes the robot to move forwards (no steering!)&lt;br /&gt;
100 - means, that the left wheel won't move.&lt;br /&gt;
200 - means, that the left wheel will do the exact opposite of the right wheel. &lt;br /&gt;
&lt;br /&gt;
angle: you can enter a value between 0 und 360°, positive and negative. Positive values will rotate the brick to the left, negative values cause right rotations.&lt;br /&gt;
&lt;br /&gt;
So, back to our two method-calls. The first call says: Make the left wheel move 0.65 * the speed of the right wheel. This will cause the robot to turn leftwards while moving. The robot will then move until it has turned by 90° to the left.&lt;br /&gt;
The second method call: The first parameter is negative, so we tell the RIGHT wheel to move at 0.65 * the speed of the LEFT wheel. The robot will move until the robot turned 90° to the left. Recognize, that the robot can only turn to the left by moving "backwards" because the right wheel rotates slower than the left wheel.&lt;br /&gt;
&lt;br /&gt;
In the last block the motor travels some centimeters fowards. Then there is a new method called arc. This methods tells the robot to move in a circle. The two parameters are:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;radius of the circle&lt;/li&gt;
    &lt;li&gt;angle: When the robot turned by this degrees, the steering will stop.&lt;/li&gt;
&lt;/ul&gt;
Both parameters may be positive or negative.&lt;br /&gt;
A positive radius means, that the circle centre should be on the left of the brick. A negative respectively means that the circle centre is on the right side of the brick.&lt;br /&gt;
A positive angle means that the robot will rotate to the left, a negative angle respectively right.&lt;br /&gt;
&lt;br /&gt;
So, the arc-method-call says: Drive a circle. The circle center is on the right side of the brick and has a radius of 10cm. Drive that circle by rotating rightwards. The only possibility to do that, is by driving the circle forwards. A positive angle of 360° would have caused the robot to drive the circle by rotating to the left, which could only have been realized by moving backwards.&lt;br /&gt;
The next steer-method-call is easy: It says: The left wheel should do the opposite of the right wheel. The robot should move until it has turned by 180°. Maybe you recognized it: It's a simple 180° in-place rotation. So we could have used pilot.rotate(180) here, too. &lt;br /&gt;
The last travel()-call makes the robot move backwards the last centimeters until it is back in it's initial position.&lt;br /&gt;
&lt;br /&gt;
That's it, at last I just refactored and added some Console-ouput to the program for comfort:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.motor.Motor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {

    final static double NINETY_DEGREES = 90.0;

    public static void main(String[] args) {

        final DifferentialPilot pilot = new DifferentialPilot(30.0, 185.0, Motor.C, Motor.B);
        pilot.setAcceleration(200);
        pilot.setRotateSpeed(50.0);
        pilot.setTravelSpeed(50.0);

        System.out.println("Configured speeds and starting the first part of the parcours.");
        travelRectangle(pilot, 350.0, 190.0);

        System.out.println("Starting the second part of the parcours.");
        driveTurns(pilot);

        System.out.println("Starting the third part of the parcours.");
        driveCircleAndBackToInitialPosition(pilot);

    }

    private static void driveCircleAndBackToInitialPosition(final DifferentialPilot pilot) {
        System.out.print("    Driving half the way...");
        pilot.travel(175.0);
        System.out.println("done!");
        System.out.print("    Driving the circle...");
        pilot.arc(-100.0,-360.0);
        System.out.println("done!");
        System.out.print("    Turning 180 degrees...");
        pilot.steer(200.0,180.0);
        System.out.println("done!");
        System.out.print("    Driving backwards to initial position...");
        pilot.travel(-175.0);
        System.out.println("done!");
    }

    private static void driveTurns(final DifferentialPilot pilot) {
        System.out.print("    Driving turn forwards...");
        pilot.steer(65.0, NINETY_DEGREES);
        System.out.println("done!");
        System.out.print("    Driving turn backwards...");
        pilot.steer(-65.0, NINETY_DEGREES);
        System.out.println("done!");
    }

    private static void travelRectangle(final DifferentialPilot pilot, final double rectLength, final double rectWidth) {
        travelRectangleEdgeAndRotate(pilot, rectLength);
        travelRectangleEdgeAndRotate(pilot, rectWidth);
        travelRectangleEdgeAndRotate(pilot, rectLength);
        travelRectangleEdgeAndRotate(pilot, rectWidth);
    }

    private static void travelRectangleEdgeAndRotate(final DifferentialPilot pilot, final double distance) {
        System.out.print("    Driving " + distance + " mm...");
        pilot.travel(distance);
        System.out.println("done!");
        System.out.print("    Rotating 90 degrees...");
        pilot.rotate(NINETY_DEGREES);
        System.out.println("done!");
    }
}
&lt;/pre&gt;
and here is the result:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://i1.ytimg.com/vi/E-lcFrSva78/0.jpg" height="266" width="320"&gt;&lt;param name="movie" value="http://www.youtube.com/v/E-lcFrSva78?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;embed width="320" height="266"  src="http://www.youtube.com/v/E-lcFrSva78?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata" type="application/x-shockwave-flash" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
It isn't 100% exact, but still quite satisfying. I think this is because the wheel diameter and the track width I gave the constructor aren't perfectly correct.
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
