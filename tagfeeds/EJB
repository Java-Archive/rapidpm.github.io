<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>EJB</title>
    <category label="EJB"/>
    <updated>2016-08-30T22:03:57.338+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <author>
        <name>Oliver Milke</name>
    </author>
    <entry>
        <title>One way to deadlock a JBoss AS 7</title>
        <category label="Deadlock"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="RapidPM"/>
        <published>2014-02-03T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&gt;One way to deadlock a JBoss AS 7&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-03 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
Take a standard JBoss AS 7 and create/deploy a simple remote stateless session bean with two methods. One of them should
be asynchronous. As shown in the following example the asynchronous method creates a little bit of load and the second one&amp;nbsp;simulates a login.

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public interface IMyBean
{
 Future&amp;lt;Void&amp;gt; doNothing();
 void login();
}&lt;/pre&gt;
&lt;pre class="brush: java"&gt;@Stateless
@Remote(IMyBean.class)
public class MyBean implements IMyBean
{
 @Override
 @Asynchronous
 public Future&amp;lt;Void&amp;gt; doNothing()
 {
  //Creates Load
  int lo = 0;
  for (int i = 0; i &amp;lt; 5000; i++)
  {
   lo += i;
  }
  System.out.println("nothing done");
  return new AsyncResult&amp;lt;Void&amp;gt;(null);
 }
 @Override
 public void login()
 {
  System.out.println("logged in");
 }
}
&lt;/pre&gt;
In the next step besides 10 EJB-Remote-Clients which access the asynchronous method parallel&amp;nbsp;we create an additional client which repeatly tries to login.
(Note: Classpath contains jboss-ejb-client.properties and jboss-client.jar)

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class HangTest
{
 public static void main(String args[]) throws NamingException
 {
  //EJB-Remote-Access
  Properties jndiProps = new Properties();
  jndiProps.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
  Context context = new InitialContext(jndiProps);
  final IMyBean myBean = (IMyBean) context.lookup("ejb:/hangtest/MyBean!IMyBean");

  //Create and start asynchronous method threads
  final List&amp;lt;Thread&amp;gt; threadList = new ArrayList&amp;lt;&amp;gt;();
  for (int i = 0; i &amp;lt; 10; i++)
  {
   Thread thread = new Thread()
   {
    @Override
    public void run()
    {
     try
     {
      myBean.doNothing().get();
     }
     catch(Exception e)
     {
      e.printStackTrace();
     }
     finally
     {
      threadList.remove(this);
     }
    }
   };
   threadList.add(thread);
   thread.start();
  }

  //Repeated Login
  while(!threadList.isEmpty())
  {
   System.out.println("Try login...");
   myBean.login();
  }
 }
}
&lt;/pre&gt;
The code above works as expected which means that random server messages ("nothing done", "logged in") are printed out and that the login client can login. It also can be executed as many times as you want without a change in behavior.&lt;br /&gt;
BUT if you increase the number of asynchronous method clients for example to 20-30 (depending on your computer) then nothing is printed out and the login client can not login anymore. The JBoss or -&amp;nbsp;to be more specific - some&amp;nbsp;components of it are in a deadlock
(Note: JBoss shutdown does not work anymore).

So what has happened?&lt;br /&gt;
&lt;br /&gt;
To answer this question we have to look into the standalone.xml, especially in the subsystem "urn:jboss:domain:ejb3". This section contains ejb3-related configurations and among them threadpools.&amp;nbsp;In this context it is important&amp;nbsp;that the default threadpool is shared between asynchronous calls, timers and ejb-remote.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;&amp;lt;subsystem xmlns="urn:jboss:domain:ejb3:1.2"&amp;gt;&lt;/pre&gt;
&lt;pre class="brush: java"&gt;...
 &amp;lt;async thread-pool-name="default"/&amp;gt;
 &amp;lt;timer-service thread-pool-name="default"&amp;gt;
  &amp;lt;data-store path="timer-service-data" relative-to="jboss.server.data.dir"/&amp;gt;
        &amp;lt;/timer-service&amp;gt;
 &amp;lt;remote connector-ref="remoting-connector" thread-pool-name="default"&amp;gt;
  &amp;lt;thread-pools&amp;gt;
   &amp;lt;thread-pool name="default"&amp;gt;
    &amp;lt;max-threads count="10"/&amp;gt;
    &amp;lt;keepalive-time time="100" unit="milliseconds"/&amp;gt;
   &amp;lt;/thread-pool&amp;gt;
  &amp;lt;/thread-pools&amp;gt;
   &amp;lt;/remote&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/pre&gt;
&lt;br /&gt;
So if you stumble upon that problem either increase the max-thread count property or even better seperate the thread-pools for asynchronous and ejb-remote components. &lt;br /&gt;
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI EJB-Remote Context for wildfly</title>
        <category label="CDI"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="JNDI"/>
        <category label="RapidPM"/>
        <category label="Wildfly"/>
        <published>2014-02-17T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/17/cdi-ejb-remote-context-for-wildfly.html&gt;CDI EJB-Remote Context for wildfly&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-17 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
    This article shows how ejb remote clients can be configured and connected in a more dynamic way.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
Within wildfly (current version 8.0.0.Final) there are several possibilities to connect ejb remote clients. Descriptions can be found on:&lt;br /&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;the standard way with jboss-ejb-client.properties&lt;br /&gt;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project"&gt;https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;a programmatic way&lt;br /&gt;&lt;a href="http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html"&gt;http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        The Problem&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        You have an application for two (or more) tenants which are identical but are deployed on different machines. Customers should be able to switch between those tenants without restarting the application. Additionally the code itself should not depend on tenant specific code.&lt;br /&gt;
        As far as i know this would be necessary with the standard approach (jboss-ejb-client.properties) given above.&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        A Solution&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        After some consideration i have identified the following five components which are needed to implement this feature.&lt;/div&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Component that creates WildFly ejb remote connections&lt;/li&gt;
            &lt;li&gt;Component that produces the JNDI-Context&lt;/li&gt;
            &lt;li&gt;Component that holds the selected tenant-key for the client&lt;/li&gt;
            &lt;li&gt;Component that maps the tenant-keys to connection properties&lt;/li&gt;
            &lt;li&gt;CDI-Modul Qualifier&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;
        Putting them together leads to the following UML:&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;/div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
            &lt;a href="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" height="382" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        To keep the example as simple as possible i have decided to use the ejb-remote-quickstart example and extend it with the jndicontext module. The current implementation uses a simple property file which holds the following data.&lt;/div&gt;
    &lt;div&gt;
&lt;pre&gt;tenant1.host=localhost
tenant1.port=8080
tenant1.username=test
tenant1.password=test
tenant1.noanonymous=false

tenant2.host=192.168.0.104
tenant2.port=8080
tenant2.username=test
tenant2.password=test
tenant2.noanonymous=false
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;h3&gt;
            The Fazit&lt;/h3&gt;
        &lt;br /&gt;
        The resulting service locator just has to use the JndiSession (in this example the RemoteEJBClient) which technically holds the tenant key and can be set from the GUI.&lt;br /&gt;
        &lt;div&gt;
&lt;pre&gt;public class RemoteEJBClient {
    @Inject @JndiContextAnno
    Instance&amp;lt;Context&amp;gt; contextInstance;

    @Inject
    JndiSession jndiSession;
    //...snip
    private RemoteCalculator lookupRemoteStatelessCalculator() throws NamingException {
        Context context = contextInstance.get();
        //...snip
    }
}

public class CDIBootStrapper {
    public static void main(String[] args) throws Exception
    {
        WeldContainer weld = new Weld().initialize();
        RemoteEJBClient client = weld.instance().select(RemoteEJBClient.class).get();

        client.getJndiSession().setTenantKey("tenant1");
        client.invokeStatelessBean();

        client.getJndiSession().setTenantKey("tenant2");
        client.invokeStatelessBean();
    }
)&lt;/pre&gt;
        &lt;/div&gt;
        So the code looks very clean and in comparison to jboss-ejb-client.properties way more functional.&lt;br /&gt;
        The sources can be found on&amp;nbsp;&lt;a href="https://bitbucket.org/abischof/injectablejndicontext"&gt;https://bitbucket.org/abischof/injectablejndicontext&lt;/a&gt;.&lt;br /&gt;
        Have fun coding... ;)&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>EJB Transaction Rollback and Timers</title>
        <category label="Java"/>
        <category label="JavaEE"/>
        <category label="EJB"/>
        <category label="Glassfish"/>
        <published>2015-02-08T00:00:00+01:00</published>
        <author>
            <name>Oliver Milke</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2015/02/08/ejb-transaction-rollback-and-timers.html&gt;EJB Transaction Rollback and Timers&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2015-02-08 from &lt;a href="/team/oliver-milke/"&gt;Oliver Milke&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
    &lt;!-- first paragraph is bla bla --&gt;
&lt;p&gt;Today I was a little confused when a colleague of mine tried to explain to me the transaction control directives our application depends on. The tough part was to consider all the
    possible rollback scenarios. To get more insight into rollback behaviour, I created a simple demo project.&lt;/p&gt;
&lt;p&gt;The project can be found on &lt;a href="https://github.com/omilke/ta-demo"&gt;github&lt;/a&gt;. It demonstrates all possible cases I could think of with respect to transaction rollback
    and programmatic timer manipulation. I have added TODO markers in places you choose between different scenarios. I also added a comment on what is expected to happen and why.
&lt;p&gt;It works with glassfish 3.2 and 4.1. Feel free to try it out and please share your thoughts. Please keep in mind, however, this project
    was primarily designed to run on both versions of glassfish.&lt;/p&gt;
&lt;p&gt;The specification (JSR-318 - EJB 3.1) can found at the &lt;a href="https://jcp.org/aboutJava/communityprocess/final/jsr318/index.html"&gt;JCP site&lt;/a&gt;. I added
    references to specification, which relate to this document.&lt;/p&gt;

&lt;h2&gt;EJB Transaction Rollback - When does it happen?&lt;/h2&gt;
&lt;p&gt;My primitive assumption was, that if the method that spans a transaction (e. g. by declaring &lt;code&gt;TransactionAttribute.REQUIRES_NEW&lt;/code&gt;) terminates with an exception,
    the associated transaction must be rolled back. However, this is not necessarily true.&lt;/p&gt;
&lt;p&gt;Actually it depends on the type of the exception. Transactions only rollback if the exception being thrown is marked for rollback (cf. chapter 14.3.1, Table 15).&lt;/p&gt;
&lt;p&gt;By the default, all checked exceptions are marked as &lt;code&gt;rollback=false&lt;/code&gt;, whereas the unchecked exception are marked as &lt;code&gt;rollback=true&lt;/code&gt;.
    You can explicitly specify rollback behaviour on exceptions with &lt;code&gt;@ApplicationException(rollback = true / false)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have an EJB that uses another EJB injected via @EJB / @Inject and the invoked method executes of the same transaction (e. g. because of
    &lt;code&gt;TransactionAttribut.REQUIRED)&lt;/code&gt;, this method can also induce a rollback of the transaction if it throws an appropriate exception.&lt;/p&gt;
&lt;p&gt;This means a business method may throw an exception and have the transaction committed at the same time. Conversely, by using another EJB a transaction can be
    rolled back even if you catch its exception. Both of these cases are shown in the demo project.&lt;/p&gt;

&lt;h2&gt;EJB Transaction Rollback and timers&lt;/h2&gt;

&lt;p&gt;Transaction rollback also influences timeout methods (i. e. methods annotated with &lt;code&gt;@Schedule&lt;/code&gt; / &lt;code&gt;@Timeout&lt;/code&gt;). If the transaction used for a timeout method shall
    be rolled back, it is required by the specification, that the method invocation will be retried at least once (cf. chapter 18.4.3). Glassfish retries the invocation 5 seconds later. However,
    if the second invocation induces a rollback as well, the timer will be expunged. That means you will loose all future invocation of that timer.&lt;/p&gt;
&lt;p&gt;The specification actually disallows timeout methods to throw application exceptions (cf. chapter 18.2.5.3), however glassfish can cope with that. Timeout method invocation is retried if either
    the method throws an exception or the associated transaction is marked for rollback. A timeout method can also have a committed transaction even though it throws an exception.
    However, since this is not allowed by the spec, its behaviour is specific to the application server in use.&lt;/p&gt;
&lt;p&gt;For glassfish, retrying timeouts and expunging timer can be configured in the admin interface (&lt;a href="http://www.rapidpm.org/2015/02/08/timerconfig.png"&gt;screenshot&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Programmatic manipulations of timers with the help of &lt;code&gt;@Resource TimerService&lt;/code&gt; are also subject to transaction rollback (cf. chapter 18.2.8). Therefore registering a new
    &lt;code&gt;@Timeout&lt;/code&gt; or cancelling and an existing &lt;code&gt;Timer&lt;/code&gt; will also be reverted of the corresponding transaction is rolled back.&lt;/p&gt;
&lt;/div&gt;</content>
        <summary></summary>
    </entry>
</feed>
