<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Test</title>
    <category label="Test"/>
    <updated>2014-11-24T15:53:23.055+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 1</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <published>2014-10-31T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html&gt;Is your JUnit KnowHow up to date? - Part 1&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-10-31 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
Most of the Java developers know JUnit for many years and probably use it on a daily basis. But like all things
JUnit evolves and so should we. Especially if your test code lacks in view of readability, understandability and clean code
you should have a closer look at some of the newer features of JUnit.
The upcoming blog series starting with this article covering the JUnit basics
will take a close look on the internals, concepts and best practices of JUnit nowadays.&lt;br/&gt;&lt;br/&gt;

JUnit (current version 4.11) itself is a test framework which provides some annotations, interfaces and utility classes
which can be used to write test classes, lifecycle methods and test methods that will ensure the correctness of your business code.
It is widely known and used and plays a big role when it comes to continuous integration and agile projects.&lt;br/&gt;&lt;br/&gt;

&lt;h2&gt;Test classes&lt;/h2&gt;

A test class is just a plain java class and nothing more. In view of JUnit it is managed through a &lt;i&gt;JUnitRunner&lt;/i&gt; which normally provides
a lifecycle.
Like many framework nowadays JUnit follows the CoC (Convention over Configuration)
which basically means that you only have to declare things that are not part of the convention. That way your code keeps small and
therefore is more readable and understandable. Considering JUnit test classes it means that you can provide your own &lt;i&gt;JUnitRunner&lt;/i&gt; but JUnit already
                                               provides a default &lt;i&gt;JUnitRunner&lt;/i&gt; (internally mapped to &lt;i&gt;BlockJUnit4ClassRunner&lt;/i&gt;). This default &lt;i&gt;JUnitRunner&lt;/i&gt; inherits from &lt;i&gt;
                                                ParentRunner&lt;/i&gt; which provides you
                                               a lifecycle which is shown in the following image and will be explained further in this article.
                                               &lt;img src="JUnitLifecycle_simple.png"/&gt;
                                               But keep in mind that this lifecycle represents only the default lifecycle. If you develop your own &lt;i&gt;JUnitRunner&lt;/i&gt; or using other JUnit-Rules it can be something really different.
                                               But those topics i will cover in another blog post.&lt;br/&gt;

&lt;h2&gt;Lifecycle methods&lt;/h2&gt;
A lifecycle method here is a method which is marked with one of the following annotations and can be used to configure your tests.
&lt;table border="1"&gt;
    &lt;tr&gt;
        &lt;th&gt;Annotation&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;@BeforeClass&lt;/td&gt;
        &lt;td&gt;Static methods (can occur multiple times) to initialize things on the test class level. The order is dependent on the
        underlying JVM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;@AfterClass&lt;/td&gt;
        &lt;td&gt;Static methods (can occur multiple times) to clean up things on the test class level. The order is dependent on the
                                                                                                         underlying JVM&lt;/td&gt;
    &lt;/tr&gt;
     &lt;tr&gt;
            &lt;td&gt;@Before&lt;/td&gt;
            &lt;td&gt;Non Static methods (can occur multiple times) to initialize things on the test method level. The order is dependent on the
            underlying JVM&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;@After&lt;/td&gt;
            &lt;td&gt;Non Static methods (can occur multiple times) to clean up things on the test method level. The order is dependent on the
            underlying JVM&lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;
As already mentioned above this is just the half truth because since JUnit 4.7 the concept of rules are integrated.&lt;br/&gt;&lt;br/&gt;

One important point: As you can see in the lifecycle diagram above both (the constructor and &lt;i&gt;@Before&lt;/i&gt; annotated methods) are executed before each
test method and therefore seem to have the same semantic (at least
from the test-method point of view). But there are some important differences to keep in mind:
&lt;ul&gt;
    &lt;li&gt;It breaks the symmetry between &lt;i&gt;@Before&lt;/i&gt; and &lt;i&gt;@After&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;If the constructor throws an exception &lt;i&gt;@After&lt;/i&gt; is not
        executed
    &lt;/li&gt;
    &lt;li&gt;JUnit can be used with several other frameworks (e.g.
        Mockito) which rely on the lifecycle at least partially. Therefor using the
        constructor for initializing can lead for example to &lt;i&gt;NullPointerExceptions&lt;/i&gt;.
    &lt;/li&gt;
&lt;/ul&gt;
Looking at that it is reasonable to say prefer &lt;i&gt;@Before&lt;/i&gt; to the constructor.&lt;br/&gt;

One historical note: The usage of annotations is available since JUnit 4.0. Before that you had to follow a naming convention (e.g. test methods
has to start with "test"). &lt;br/&gt;&lt;br/&gt;

&lt;h2&gt;Test methods&lt;/h2&gt;
A test method for JUnit is a non static, public method which is marked with a &lt;i&gt;@Test&lt;/i&gt; annotation. Such a method should contain so
called assertions and/or assumptions (yes - there are use cases with none of them). The difference between them is that a cause of an assertion leads
to a fail of the test method because an AssertionError is thrown. Indeed an assumption also throws an exception (AssumptionViolatedException) but this one
marks the test just as ignored. So an assumption has more the semantic of a useless test which could be the case if you rely on another system
which is not running or cannot be started.&lt;br/&gt;
The following table shows the basic assertions which are part of the &lt;i&gt;Assert&lt;/i&gt; class.
&lt;table border="1"&gt;
    &lt;tr&gt;
        &lt;th&gt;Assert&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertTrue&lt;/td&gt;
        &lt;td&gt;Checks whether a given condition is true. Fails if condition
            is false. Example: assertTrue("User not signed up",user.isSignUp())
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertFalse&lt;/td&gt;
        &lt;td&gt;Opposite of assertTrue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNull&lt;/td&gt;
        &lt;td&gt;Checks whether a given object is null. Fails if object is
            not null. Example: assertNull(calculator)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotNull&lt;/td&gt;
        &lt;td&gt;Opposite of assertNull&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertSame&lt;/td&gt;
        &lt;td&gt;Checks whether two objects are reference the same object.
            Fails if not. Example: assertSame("Hallo Welt", "Hallo " + "Welt")
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotSame&lt;/td&gt;
        &lt;td&gt;Opposite of assertSame. Example: assertNotSame("Hallo Welt",
            new String("Hallo Welt"))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertEquals&lt;/td&gt;
        &lt;td&gt;Checks whether two objects are equal. Example:
            assertEquals("Hallo Welt", new String("Hallo Welt"))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotEquals&lt;/td&gt;
        &lt;td&gt;Opposite of assertEquals&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertArrayEquals&lt;/td&gt;
        &lt;td&gt;Checks whether two arrays are identical in length and
            elements. Example: assertArrayEquals(new int[]{1,2}, new int[]{1,2})
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertThat&lt;/td&gt;
        &lt;td&gt;Makes use of a matcher which describes itself to give
            feedback if it fails. Example: assertThat(new String("Hallo Welt"),
            equalTo("Hallo Welt"))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;fail&lt;/td&gt;
        &lt;td&gt;Throws an &lt;i&gt;AssertionError&lt;/i&gt; so that the test will fail
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
Also note that every assert method is overloaded with an additional errorMessage
String in front of the parameter list. This is considered best practice because it makes the assertion or assumption more
readable and significant if something goes wrong (FYI: There is also an explicit
                                                                       PMD-Rule &lt;i&gt;JUnitAssertionsShouldIncludeMessage&lt;/i&gt; for that).&lt;br/&gt;&lt;br/&gt;

&lt;table border="1"&gt;
    &lt;tr&gt;
        &lt;th&gt;Assume&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeTrue&lt;/td&gt;
        &lt;td&gt;Checks whether a given condition is true. Skips test and marks it as ignored if condition
            is false. Example: assumeTrue("User not signed up",user.isSignUp())
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeFalse&lt;/td&gt;
        &lt;td&gt;Opposite of assumeTrue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeNotNull&lt;/td&gt;
        &lt;td&gt;Checks whether one or many given objects are not null. Skips test and marks it as ignored otherwise. Example: assertNull(calculator)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeNoException&lt;/td&gt;
        &lt;td&gt;Checks whether a given &lt;i&gt;Throwable&lt;/i&gt; is not thrown. Otherwise test is skipped and marked as ignored.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeThat&lt;/td&gt;
        &lt;td&gt;Makes use of a matcher to check if a condition is true. If not test is skipped and marked as ignored.
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

At this point i left out the following points because they would blow up this article. So stay tuned and read more
in one of the following topics:
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;assertThat&lt;/i&gt; with the big topic &lt;i&gt;Matcher&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Example&lt;/h2&gt;
So far i had only covered theory. Now i am giving a simple example which uses annotations.
The calculator here is specialized for integers but could be easily extended for other numeric types. Our functional methods
would be add, subtract, multiply and divide.

	&lt;pre brush="java"&gt;
public class Calculator {

	public int add(int a, int b) {
		return a + b;
	}

	public int subtract(int a, int b) {
		return a - b;
	}

	public int multiply(int a, int b) {
		return a * b;
	}

	public int divide(int a, int b) {
		return a / b;
	}
}&lt;/pre&gt;
So far nothing special so let us have a look at the test. I created a test method for each public method of the
calculator and used the
&lt;i&gt;@Before&lt;/i&gt; annotated method to initialize the calculator. That way each time before the test method is executed the calculator is newly initialized. The reason for
that is quite simple - i want to eliminate possible side effects in the future (which could occur if i would use &lt;i&gt;@BeforeClass&lt;/i&gt;)
and do not want to violate the DRY (Don't Repeat Yourself) principle (which would occur if i would initialize the calculator in every test
method).
&lt;br/&gt;
	&lt;pre brush="java"&gt;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

public class CalculatorSimpleTest {

	Calculator calculator;

	@Before
	public void setUp() throws Exception {
		calculator = new Calculator();
	}

	@Test
	public void testAdd() {
		String errorMessage = "Adding failed";
		int expected = 3;
		int add = calculator.add(1, 2);
		assertEquals(errorMessage, expected, add);

		// Bad assertTrue(3==calculator.add(1, 2));
		// Bad assertSame(3, calculator.add(1, 2));
	}

	@Test
	public void testSubtract() {
		String errorMessage = "Subtracting failed";
		int expected = -1;
		int add = calculator.subtract(1, 2);
		assertEquals(errorMessage, expected, add);
	}

	@Test
	public void testMultiply() {
		String errorMessage = "Multiplying failed";
		int expected = 2;
		int add = calculator.multiply(1, 2);
		assertEquals(errorMessage, expected, add);
	}

	@Test
	public void testDivide() {
		String errorMessage = "Dividing failed";
		int expected = 0;
		int add = calculator.divide(1, 2);
		assertEquals(errorMessage, expected, add);
	}
}
&lt;/pre&gt;
As you can see every test method checks an expected value against an
actual computation result. If there is a mismatch an assertion error is
thrown. &lt;br/&gt;
If something went wrong (here i changed the expected result of the multiply method) you can see corresponding error message.
&lt;br/&gt;
&lt;img src="message.png"/&gt;

&lt;h2&gt;ExceptionHandling&lt;/h2&gt;
Now you are able to develop standard tests and in many cases this
should be sufficient (for the moment :)). But in view of testing
exceptions your test classes can suffer really fast. Considering the
calculator you can see easily that at least the divide method needs one
more test.
	&lt;pre brush="java"&gt;
	@Test
	public void testDivide_WithZero_WillFail() {
		assertEquals(0, calculator.divide(1, 0));
	}
	&lt;/pre&gt;
This test will fail because an
&lt;i&gt;ArithmeticException&lt;/i&gt; is thrown. But lets assume that this
behavior (throwing the exception) is correct because i want the
client handle the exception. So with a naive small refactoring i can get
this.

	&lt;pre brush="java"&gt;
	@Test
	public void testDivide_WithZero_WillFail() {
		try {
			assertEquals(0, calculator.divide(1, 0));
			fail();
		} catch (ArithmeticException e) {
			// Bad
		}
	}
	&lt;/pre&gt;
Ok, now i have tested the correct behavior but the resulting test code
does not look good. I have boiler-plate code and doubled the size of my previous test code therefore it is less
understandable. A better way to do that is using the
&lt;i&gt;@Test&lt;/i&gt; annotation the following way.
	&lt;pre brush="java"&gt;
	@Test(expected = ArithmeticException.class)
	public void testDivide_WithZero_WillFail() {
		assertEquals(0, calculator.divide(1, 0));
	}
	&lt;/pre&gt;
This test method only fails if the
&lt;i&gt;ArithmeticException&lt;/i&gt; is not thrown.&lt;br/&gt;&lt;br/&gt;

So this is what i consider as the JUnit basics but there will be more in the upcoming articles.&lt;br/&gt;
Have fun coding.
&lt;/div&gt;</content>
        <summary></summary>
    </entry>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 1 Quiz</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <category label="Quiz"/>
        <published>2014-11-04T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/11/04/is-your-junit-knowhow-up-to-date-part-.html&gt;Is your JUnit KnowHow up to date? - Part 1 Quiz&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-11-04 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
This short review quiz is related to the previous article &lt;a href="http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;b&gt;1.&lt;/b&gt; What JUnit version introduced annotations for handling the simple lifecycle?&lt;br/&gt;
    &lt;ul&gt;
    &lt;li&gt;since 1.0&lt;/li&gt;
    &lt;li&gt;since 3.6&lt;/li&gt;
    &lt;li&gt;since 4.0&lt;/li&gt;
    &lt;li&gt;since 4.7&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;3.&lt;/b&gt; Why should you prefer &lt;i&gt;@Before&lt;/i&gt; annotated methods in comparison to the constructor? Because&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;it does not break the symmetry of the lifecycle&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;@Before&lt;/i&gt; should not be preferred&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;@Before&lt;/i&gt; methods handle exceptions while constructors not&lt;/li&gt;
    &lt;li&gt;other frameworks rely on that&lt;/li&gt;
    &lt;/ul&gt;
&lt;b&gt;4.&lt;/b&gt; Can you use more than one &lt;i&gt;@Before&lt;/i&gt; annotated method in a test class?&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;yes&lt;/li&gt;
    &lt;li&gt;no&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;5.&lt;/b&gt; Which method qualifiers must be used for a &lt;i&gt;@AfterClass&lt;/i&gt; method?&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;protected&lt;/li&gt;
    &lt;li&gt;static&lt;/li&gt;
    &lt;li&gt;public&lt;/li&gt;
    &lt;li&gt;final&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;6.&lt;/b&gt; What happens if a public method is annotated with &lt;i&gt;@Before&lt;/i&gt;, &lt;i&gt;@Test&lt;/i&gt; and &lt;i&gt;@After&lt;/i&gt;?&lt;br/&gt;
    &lt;ul&gt;&lt;li&gt;Runtime-/ValidationError&lt;/li&gt;
    &lt;li&gt;CompilerError&lt;/li&gt;
    &lt;li&gt;Runs fine&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;7.&lt;/b&gt; What is the simplest way (considering clean code) to handle exceptions?&lt;br/&gt;
    &lt;ul&gt;&lt;li&gt;use try/catch&lt;/li&gt;
    &lt;li&gt;use @Test(expected=....class)&lt;/li&gt;
    &lt;li&gt;it is integrated in JUnit&lt;/li&gt;&lt;/ul&gt;
&lt;b&gt;8.&lt;/b&gt; What is the result of the following code?

&lt;pre brush="java"&gt;
public class LifecycleTest {

    @Before
    public void before() {
        System.out.print("3");
    }

    public LifecycleTest() {
        System.out.print("2");
    }

    @BeforeClass
    public static void beforeClass() {
        System.out.print("1");
    }

    @Test
    public void test() {
        System.out.print("4");
    }

    @Test
    public void test2(){
        System.out.print("5");
    }

    @After
    public void after() {
        System.out.print("6");
    }
}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;RuntimeException&lt;/li&gt;
&lt;li&gt;123456&lt;/li&gt;
&lt;li&gt;123462356&lt;/li&gt;
&lt;li&gt;Not predictable, depends on JVM&lt;/li&gt;
&lt;/ul&gt;

The solutions can be found here in white color: &lt;font color="white"&gt;1c; 2acd; 3a; 4bc; 5c; 6b; 7d; &lt;/font&gt;
&lt;/div&gt;</content>
        <summary></summary>
    </entry>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 2</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <published>2014-11-24T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/11/24/is-your-junit-knowhow-up-to-date-part-.html&gt;Is your JUnit KnowHow up to date? - Part 2&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-11-24 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
This time i want to cover the topic of aggregating JUnit tests
 which is also part of my blog series &lt;i&gt;Is your JUnit knowhow up to date?&lt;/i&gt; The last article can be found
 &lt;a href="http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html"&gt;here&lt;/a&gt;. So let us get started.

&lt;h3&gt;Suites&lt;/h3&gt;

A JUnit &lt;i&gt;Suite&lt;/i&gt; is the simplest and oldest way to aggregate JUnit tests. You can use it by annotating your test suite
with &lt;i&gt;@Suite&lt;/i&gt; as you can see in the following code snippet:&lt;br/&gt;

&lt;pre class="brush: java"&gt;
@RunWith(Suite.class)
@Suite.SuiteClasses({CalculatorSimpleTest.class, CalculatorPerformanceTest.class})
public class CalculatorSuite {
}
&lt;/pre&gt;
Basically you tell JUnit to look out for the class array of the &lt;i&gt;@Suite.SuiteClasses&lt;/i&gt; which contains all the classes of
 the suite. But there is a little bit more. &lt;i&gt;Suite&lt;/i&gt; itself inherits from &lt;i&gt;ParentRunner&lt;/i&gt; which i covered in the last
 &lt;a href="http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html"&gt;article&lt;/a&gt;.
Therefore &lt;i&gt;Suites&lt;/i&gt; have a lifecycle but in comparison to the default runner only include the &lt;i&gt;Class Ready&lt;/i&gt; lifecycle methods
which are:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;@BeforeClass&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;@AfterClass&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Class Rules (i have not covered it yet)&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
But although it is technically possible to used them it does not mean that it is good. In general a suite class should only act as an
aggregation container. One reason for that is that suite classes can be listed in suites and categories itself so that you can build up
hierarchical test structures. If you now use lifecycle methods in your suites you probably decrease understandability and your isolation
between your suites.&lt;br/&gt;&lt;br/&gt;

I also took a deep look at the &lt;i&gt;Suite.SuiteClasses&lt;/i&gt; annotation which i considered at first as a bad solution to the problem of aggregating test classes
and suites. The reason for that was the declarative nature of it which means that you have to declare every single class or suite. Even with IDE support nowadays this
could lead to some work if you have many classes. Considering bug fixes or enhancements of a system there is also the problem that those new tests maybe do not make
it in the test suites and therefore could lead to bad reports about the health or quality of the aggregation part.&lt;br/&gt;
On the second look i changed my mind. The first reason for that was that there are already some libraries with whom you can overcome the declarative nature problem. The
two most promising ones should be:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://johanneslink.net/projects/cpsuite.jsp"&gt;ClasspathSuite&lt;/a&gt; - As the name suggests this library extends the suite idea for classpaths.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/junit-toolbox/"&gt;JUnit Toolbox&lt;/a&gt; - A JUnit extension library which provides among other things
a WildcardPatternSuite which extends the suite idea for wildcards.&lt;/li&gt;
&lt;/ul&gt;
The second reason came after thinking about when aggregate tests anyway which i would do for the following topics:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;by domain or package&lt;/li&gt;
&lt;li&gt;by test stage (for example component, integration or performance tests)&lt;/li&gt;
&lt;/ul&gt;
There are probably more topics by which you can aggregate your tests. The point is that in such cases you explicitly want to declare which tests are in that suite and which
are not. &lt;br/&gt;&lt;br/&gt;

FYI: In the old days of JUnit 3 &lt;i&gt;suites&lt;/i&gt; were recognized by a &lt;i&gt;public static Test suite()&lt;/i&gt; method in which you had to add the test classes.
&lt;br/&gt;&lt;br/&gt;

&lt;h3&gt;Categories&lt;/h3&gt;

A more flexible way to aggregate tests are &lt;i&gt;Categories&lt;/i&gt; which were introduced with JUnit 4.8 and strangely enough are still in the experimental package.
The basic concept is similar to suites which means that there is a &lt;i&gt;Categories&lt;/i&gt; class which is a JUnit runner (in detail inherits from &lt;i&gt;Suite&lt;/i&gt;) and has to be declared with &lt;i&gt;@RunWith(Categories.class)&lt;/i&gt;
on top of your aggregation container. You also have to declare your test classes with &lt;i&gt;@Suite.SuiteClasses&lt;/i&gt;.&lt;br/&gt; The new part is that you can mark your test classes and/or test methods
with &lt;i&gt;@Category&lt;/i&gt; and a marker class which is used as a filter in your test aggregation container. For that there are two more annotations &lt;i&gt;@Categories.IncludeCategory&lt;/i&gt;
and &lt;i&gt;@Categories.ExcludeCategory&lt;/i&gt; which take a category filter class (the default behavior, without any include or exclude, includes all test methods).
The only limitation i found so far is that you can use only one category marker class on the test aggregation container and that you can not
repeat those annotations.&lt;br/&gt;
An example of an aggregate container would be look like this:&lt;br/&gt;

&lt;pre class="brush: java"&gt;
@RunWith(Categories.class)
@Categories.IncludeCategory(SlowTests.class)
@Suite.SuiteClasses( { CalculatorSimpleTest.class, CalculatorPerformanceTest.class})
public class OnlySlowTestSuite {}

public interface SlowTests{}
&lt;/pre&gt;

In this example i had declared a category suite which uses the test classes &lt;i&gt;CalculatorSimpleTest&lt;/i&gt; and &lt;i&gt;CalculatorPerformanceTest&lt;/i&gt; and include from that
classes only the test methods which are annotated with &lt;i&gt;@Category(SlowTests.class)&lt;/i&gt;. A &lt;i&gt;@Category&lt;/i&gt; annotation can be used on class and/or on method level and
expects an array of classes. In general it is recommended to use only one class because otherwise it could be really difficult
to understand your suite filters considering including and excluding.
&lt;br/&gt;
In the example above i declare the &lt;i&gt;SlowTests&lt;/i&gt; category class marker.

&lt;pre class="brush: java"&gt;
public class CalculatorSimpleTest {

    //snip..

    @Category(SlowTests.class)
    @Test
    public void testSubstract() {
        for (int i = 0; i &lt; 10000; i++) {
            try {Thread.sleep(10l);} catch (InterruptedException e) {
                e.printStackTrace();
            }

            String errorMessage = "Substracting failed";
            int expected = 1;
            int add = calculator.substract(i + 1, i);
            assertEquals(errorMessage, expected, add);
        }
    }
}
&lt;/pre&gt;

If you want to skip all slowtests you would exchange &lt;i&gt;IncludeCategory&lt;/i&gt;
with &lt;i&gt;ExcludeCategory&lt;/i&gt;.&lt;br/&gt;&lt;br/&gt;
At the time of writing this article JUnit 4.12 beta3 is released which already denotes a little change in the lifecycle handling
considering categories. Until now it was possible to use &lt;i&gt;@Category&lt;/i&gt; on lifecycle methods like &lt;i&gt;@Before&lt;/i&gt; which made
those tests very hard to understand. Therefore JUnit introduced a validation handling which prohibits this usage.&lt;br/&gt;&lt;br/&gt;




&lt;/div&gt;</content>
        <summary></summary>
    </entry>
</feed>
