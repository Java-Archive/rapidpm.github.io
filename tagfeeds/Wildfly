<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Wildfly</title>
    <category label="Wildfly"/>
    <updated>2014-05-23T10:42:14.944+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>Raspberry Wildfly Cluster for less than 300EUR</title>
        <category label="IoT"/>
        <category label="JBoss"/>
        <category label="JDK8"/>
        <category label="Raspberry PI"/>
        <category label="Wildfly"/>
        <published>2014-02-13T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/13/raspberry-wildfly-cluster-for-less-tha.html&gt;Raspberry Wildfly Cluster for less than 300EUR&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-13 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
So WildFly 8 is final now.&lt;br /&gt;
In this article i like to show how you can create a development/testing wildly cluster with raspberry pis and only one power supply.&lt;br /&gt;
&lt;br /&gt;
I have bought:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;5x Raspberry Pis (Model B) with Wireless USB-Adapters&lt;/li&gt;
    &lt;li&gt;1x 10-Port USB 2.0 Hub&lt;/li&gt;
    &lt;li&gt;5x USB to Micro USB Adpapter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" height="400" width="300" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
The Raspberries are configured with Raspbian Wheezy (wlan auto), JDK 8 and Wildfly 8 Final.&lt;br /&gt;
&lt;div&gt;
    In this combination you have to remove the '-server' from the domain.sh otherwise WildFly won't start.&lt;/div&gt;
&lt;br /&gt;
The WildFly Configuration can be made within 5 minutes.&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Master&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Create management user admin (./add-user.sh)&lt;/li&gt;
        &lt;li&gt;Create a management slave user for each of your pi slaves (./add-user.sh)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Remember the secret value at the end of this process for each slave (e.g.&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&amp;lt;secret value="MTIzNDU=" /&amp;gt;&lt;/span&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to the public interface (e.g. 192.168.0.103)&amp;nbsp;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;li&gt;Slave&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Configure host.xml with the slave name of 1.1&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;host name="slave1" xmlns="urn:jboss:domain:2.0"&amp;gt;&lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Configure the server identity&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;server-identities&amp;gt;
                &amp;lt;secret value="MTIzNDU="/&amp;gt;
                &amp;lt;/server-identities&amp;gt;
            &lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to master and public interface (e.g. 192.168.0.104)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;To simply the typing i have written a small script that takes the master-ip and the bind-ip&lt;/li&gt;
&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&lt;pre&gt;#MasterAdress
MASTER_ADDRESS=$1

# Bind Addresses
BIND_ADDRESS=$2

JBOSS_BIND_ADDRESS_MANAGEMENT=$BIND_ADDRESS
JBOSS_BIND_ADDRESS=$BIND_ADDRESS
JBOSS_BIND_ADDRESS_UNSECURE=$BIND_ADDRESS

sudo ./domain.sh -Djboss.bind.address.unsecure=$JBOSS_BIND_ADDRESS_UNSECURE -Djboss.bind.address.management=$BOSS_BIND_ADDRESS_MANAGEMENT -Djboss.bind.address=$JBOSS_BIND_ADDRESS -Djboss.domain.master.address=$MASTER_ADDRESS&lt;/pre&gt;
&lt;/span&gt;

        &lt;/ul&gt;
    &lt;/ol&gt;
&lt;/ol&gt;
Ready. Now you can deploy any archive either to main-server-group (just a domain) or other-server-group (full cluster).&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI EJB-Remote Context for wildfly</title>
        <category label="CDI"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="JNDI"/>
        <category label="RapidPM"/>
        <category label="Wildfly"/>
        <published>2014-02-17T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/17/cdi-ejb-remote-context-for-wildfly.html&gt;CDI EJB-Remote Context for wildfly&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-17 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
    This article shows how ejb remote clients can be configured and connected in a more dynamic way.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
Within wildfly (current version 8.0.0.Final) there are several possibilities to connect ejb remote clients. Descriptions can be found on:&lt;br /&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;the standard way with jboss-ejb-client.properties&lt;br /&gt;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project"&gt;https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;a programmatic way&lt;br /&gt;&lt;a href="http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html"&gt;http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        The Problem&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        You have an application for two (or more) tenants which are identical but are deployed on different machines. Customers should be able to switch between those tenants without restarting the application. Additionally the code itself should not depend on tenant specific code.&lt;br /&gt;
        As far as i know this would be necessary with the standard approach (jboss-ejb-client.properties) given above.&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        A Solution&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        After some consideration i have identified the following five components which are needed to implement this feature.&lt;/div&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Component that creates WildFly ejb remote connections&lt;/li&gt;
            &lt;li&gt;Component that produces the JNDI-Context&lt;/li&gt;
            &lt;li&gt;Component that holds the selected tenant-key for the client&lt;/li&gt;
            &lt;li&gt;Component that maps the tenant-keys to connection properties&lt;/li&gt;
            &lt;li&gt;CDI-Modul Qualifier&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;
        Putting them together leads to the following UML:&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;/div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
            &lt;a href="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" height="382" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        To keep the example as simple as possible i have decided to use the ejb-remote-quickstart example and extend it with the jndicontext module. The current implementation uses a simple property file which holds the following data.&lt;/div&gt;
    &lt;div&gt;
&lt;pre&gt;tenant1.host=localhost
tenant1.port=8080
tenant1.username=test
tenant1.password=test
tenant1.noanonymous=false

tenant2.host=192.168.0.104
tenant2.port=8080
tenant2.username=test
tenant2.password=test
tenant2.noanonymous=false
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;h3&gt;
            The Fazit&lt;/h3&gt;
        &lt;br /&gt;
        The resulting service locator just has to use the JndiSession (in this example the RemoteEJBClient) which technically holds the tenant key and can be set from the GUI.&lt;br /&gt;
        &lt;div&gt;
&lt;pre&gt;public class RemoteEJBClient {
    @Inject @JndiContextAnno
    Instance&amp;lt;Context&amp;gt; contextInstance;

    @Inject
    JndiSession jndiSession;
    //...snip
    private RemoteCalculator lookupRemoteStatelessCalculator() throws NamingException {
        Context context = contextInstance.get();
        //...snip
    }
}

public class CDIBootStrapper {
    public static void main(String[] args) throws Exception
    {
        WeldContainer weld = new Weld().initialize();
        RemoteEJBClient client = weld.instance().select(RemoteEJBClient.class).get();

        client.getJndiSession().setTenantKey("tenant1");
        client.invokeStatelessBean();

        client.getJndiSession().setTenantKey("tenant2");
        client.invokeStatelessBean();
    }
)&lt;/pre&gt;
        &lt;/div&gt;
        So the code looks very clean and in comparison to jboss-ejb-client.properties way more functional.&lt;br /&gt;
        The sources can be found on&amp;nbsp;&lt;a href="https://bitbucket.org/abischof/injectablejndicontext"&gt;https://bitbucket.org/abischof/injectablejndicontext&lt;/a&gt;.&lt;br /&gt;
        Have fun coding... ;)&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Wildfly/JBoss: How to secure customer passwords</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-02-28T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/28/wildfly-jboss--how-to-secure-customer-.html&gt;Wildfly/JBoss: How to secure customer passwords&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-28 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
    If you are familiar with Wildfly/JBoss you might now that you can easily configure your system to use JAAS database authentication  for the login process of your customer. Because it is considered bad practice to store passwords in clear text a hash-algorithm (e.g. SHA256, MD5) can be specified to encrypt them. Further informations can be found under&amp;nbsp;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Security+subsystem+configuration"&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    The problem with that approach is that your passwords will be vulnerable to dictionary and rainbowtable attacks (refresh your knowlegde&amp;nbsp;&lt;a href="http://netsecurity.about.com/od/hackertools/a/Rainbow-Tables.htm"&gt;here&lt;/a&gt;).&lt;/div&gt;
&lt;div&gt;
    One way to face this problem is to use salted hashed passwords but the standard DatabaseServerLoginModule does not support that. But you can use &lt;a href="http://www.rtner.de/software/PBKDF2.html"&gt;this&lt;/a&gt;&amp;nbsp;extension of the DatabaseServerLoginModule.&lt;/div&gt;
&lt;div&gt;
    The configuration is fairly easy:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
    Wildfly/JBoss Konfiguration&lt;/h3&gt;
&lt;div&gt;
    &lt;b&gt;1&lt;/b&gt;. Create module&lt;/div&gt;
&lt;div&gt;
    Create the new module de.rtner.security.main and configure the module.xml like this&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;module xmlns="urn:jboss:module:1.1" name="de.rtner.security"&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource-root path="PBKDF2-1.0.4.jar"/&amp;gt;
        &amp;lt;resource-root path="SaltedDatabaseLoginModule-1.0.4.jar"/&amp;gt;
    &amp;lt;/resources&amp;gt;
   &amp;lt;dependencies&amp;gt;
        &amp;lt;module name="javax.api"/&amp;gt;
        &amp;lt;module name="javax.servlet.api"/&amp;gt;
        &amp;lt;module name="org.jboss.as.web-common"/&amp;gt;
        &amp;lt;module name="org.jboss.logging"/&amp;gt;
        &amp;lt;module name="org.picketbox"/&amp;gt;
        &amp;lt;module name="sun.jdk"/&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/module&amp;gt;&lt;/pre&gt;
    Both declared jars must also be present in that folder.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;2&lt;/b&gt;. Update module.xml of picketbox.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    Every custom login module has to be declared as a dependencies in the module.xml of picketbox. So just add this line:&lt;br /&gt;
    &lt;pre&gt;&amp;lt;module name="de.rtner.security"/&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;3&lt;/b&gt;. Update standalone.xml&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;login-module code="de.rtner.security.auth.spi.SaltedDatabaseServerLoginModule" flag="required" module="de.rtner.security"&amp;gt;
 &amp;lt;module-option name="dsJndiName" value="java:jboss/datasources/ExampleDS"/&amp;gt;
 &amp;lt;module-option name="principalsQuery" value="select password from User where login=?"/&amp;gt;
 &amp;lt;module-option name="rolesQuery" value="select role, 'Roles' from UserRole where login=?"/&amp;gt;
 &amp;lt;module-option name="hmacAlgorithm" value="HMacSHA256"/&amp;gt;
 &amp;lt;module-option name="formatter" value="de.rtner.security.auth.spi.PBKDF2HexFormatter"/&amp;gt;
 &amp;lt;module-option name="engine" value="de.rtner.security.auth.spi.PBKDF2Engine"/&amp;gt;
 &amp;lt;module-option name="engine-parameters" value="de.rtner.security.auth.spi.PBKDF2Parameters"/&amp;gt;
&amp;lt;/login-module&amp;gt;&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
The password encryption can be done with the following function.
&lt;br /&gt;
&lt;div&gt;
&lt;pre class="brush: java"&gt;private String createPbKdF2Passwort(String password) throws NoSuchAlgorithmException
{
 PBKDF2Formatter formatter = new PBKDF2HexFormatter();
 SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
 byte[] salt = new byte[8];
 sr.nextBytes(salt);
 int iterations = 1000;
 PBKDF2Parameters p = new PBKDF2Parameters("HmacSHA256", "ISO-8859-1", salt, iterations);
 PBKDF2Engine e = new PBKDF2Engine(p);
 p.setDerivedKey(e.deriveKey(password));
 return formatter.toString(p);
}&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Have fun coding.&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
