<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Streams</title>
    <category label="Streams"/>
    <updated>2014-07-21T13:14:13.445+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>SpeedUp from Charts with Streams</title>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Streams"/>
        <published>2013-11-09T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2013/11/09/speedup-from-charts-with-streams.html&gt;SpeedUp from Charts with Streams&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2013-11-09 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
Today we I am writing about the possibillity to speedup the JavaFX GUI elements with the new streams-API from JDK8.
&lt;br /&gt;
Let´s play with the original example from Oracle. The LineChart demo will be used as base for the following.
We are collecting/generating values for a line of points for every hundreds step. Al steps between are interpolated with splines.
For calculating the splines I am using the jakarta-commons math3 lib.&lt;a href="http://commons.apache.org/proper/commons-math/"&gt; [1]&lt;/a&gt;&lt;br /&gt;
Normaly the following steps are needed to generate a LineChart.
- get the base values to show&lt;br /&gt;
- calculate the interpolated values&lt;br /&gt;
- create the line-elements&lt;br /&gt;
- fill the Line-Chart and show it&lt;br /&gt;
&lt;br /&gt;

&lt;b&gt;Get the base values to show&lt;/b&gt;&lt;br /&gt;

For this example we are generating the values we are needing. To hold the values for a List of curves
I am using a
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
List&lt;List&lt;Integer&gt;&gt;
]]&gt;&lt;/script&gt;

Without streams you could do it like this:
&lt;br /&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix(){
final List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
   for (int i = 0; i&lt;200; i++){
   	final List&lt;Integer&gt; generatedDemoValuesForY = generateDemoValuesForY();
        	result.add(generatedDemoValuesForY);            
}
   	return result;
}

public List&lt;Integer&gt; generateDemoValuesForY(){
final Random random = new Random();
   final List&lt;Integer&gt; result = new ArrayList&lt;&gt;();
   for(int i = 0; i&lt;10; i++){
   	result.add(random.nextInt(100));
   }
   return result;
}
]]&gt;&lt;/script&gt;

But with streams I could write this in a more compact form.
The nice here is the possibility to concat the single steps. But this is only to show the new streams api.
There is no parallel part.

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix(){
return Stream
   	.generate(this::generateDemoValuesForY)
         .limit(200)	//Anzahl Kurven
         .collect(Collectors.toList());
}

public List&lt;Integer&gt; generateDemoValuesForY(){
final Random random = new Random();
   return Stream
   	.generate(() -&gt; random.nextInt(100))
         .limit(10)
         .collect(Collectors.toList());
}
]]&gt;&lt;/script&gt;
&lt;b&gt; Calculate the interpolated values &lt;/b&gt;

Now I will start to caclculate the interpolated values. For this I am using the commons-math3 lib from Apache.
The way to do this is short and straid forward.
- Get the base values from the curve you want to calculate on &lt;br /&gt;
- Choose the algorithm you want to use&lt;br /&gt;
- Fill the base values as init into the function&lt;br /&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
private UnivariateFunction createInterpolateFunction(
final List&lt;Integer&gt; values){

   final double[] valueArrayX = new double[values.size()];
   for (int i = 0; i &lt; valueArrayX.length; i++) {
   	valueArrayX[i] = (double)i* STEP_SIZE;
  	}

   final double[] valueArrayY = new double[values.size()];
   int i=0;
   for (final Integer value : values) {
   	valueArrayY[i] = (double) value.intValue();
         i= i+1;
  	}

   final UnivariateInterpolator interpolator = 
new SplineInterpolator();
   final UnivariateFunction function = 
interpolator.interpolate(valueArrayX, valueArrayY);
  	return function;
}
]]&gt;&lt;/script&gt;

Now we are able to caculate the interpolated values.
This is something we can do in parallel for every curve. This means that we can start with the speed up.
The importand parts are the
".parallelStream()" to start a Thread for eveery elements of the List
and during the "map(v-&amp;gt; ... )" phase the calculation is done. Every task is put to the Root - Fork-And-Join Pool.

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
private List&lt;List&lt;Double&gt;&gt; getValuesForSeries() {
final List&lt;List&lt;Integer&gt;&gt; demoValueMatrix =
generateDemoValueMatrix();
   final List&lt;List&lt;Double&gt;&gt; collect = demoValueMatrix
   	.parallelStream()
         	.map(v -&gt; {
         		final UnivariateFunction interpolateFunction = 
createInterpolateFunction(v);
              	//baue Kurve auf
                final int anzahlValuesInterpolated = 
(v.size()-1) * STEP_SIZE;
               	final List&lt;Double&gt; result = new ArrayList&lt;&gt;();
                for (int i = 0; i &lt; anzahlValuesInterpolated-1; i++) {
                	final double valueForY = 
interpolateFunction.value(i);
                     	result.add(valueForY);
              	}
                return result;
       	})
         .collect(Collectors.toList());
return collect;
}

]]&gt;&lt;/script&gt;
&lt;b&gt;Create the line-elements&lt;/b&gt;

The grafical elements for the Line-Chart are created in the same way. In parallel for every curve.

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[

private List&lt;XYChart.Series&gt; generateNextSeries(){
final List&lt;XYChart.Series&gt; chartSeries = getValuesForSeries()
   	.parallelStream()
         	.map(v -&gt; {
        		final XYChart.Series nextSeries = new XYChart.Series();
               	int i = 0;
                for (final Double valueForY : v) {
                	final XYChart.Data data 
= new XYChart.Data(i, valueForY);
                  	nextSeries.getData().add(data);
                     	i = i + 1;
              	}
                return nextSeries;
        	}).collect(Collectors.toList());
   return chartSeries;
}
]]&gt;&lt;/script&gt;
&lt;b&gt; Fill the Line-Chart and show it&lt;/b&gt;

Now the last step is the filling of the Line-Chart itself.
This is done in a seriel way. No parralel way is possible in the moment.
But this is not the part that could bring a speed-up.

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final List&lt;XYChart.Series&gt; serieses = generateNextSeries();
final ObservableList&lt;XYChart.Series&gt; data = lineChart.getData();
data.addAll(serieses);
]]&gt;&lt;/script&gt;

&lt;b&gt; Lesson Learned&lt;/b&gt;


What we can see is the possibillity to speed up the GUI part in several ways.
Not only the generating of the values itself. The creation of the grafical elements could be done in parralel too.
The seriell Version LineChartSerialDemo, needed for the 11´th round 2.799.209.417ns and the parralel version
LineChartDemo was done in 261.545.220ns.
This is a speed up of 10 at my MacBookPro.

Happy coding..








&lt;!--10--&gt;&lt;/integer&gt;&lt;/integer&gt;&lt;!--200--&gt;&lt;/list&gt;&lt;/list&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JDK8/Streams are cool? Here is the answer. ;-)</title>
        <category label="Java"/>
        <category label="JDK8"/>
        <category label="Streams"/>
        <published>2014-02-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/10/jdk8-streams-are-cool-here-is-the-answ.html&gt;JDK8/Streams are cool? Here is the answer. ;-)&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-10 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
Today I was preparing a few slides for my next JUG talk.
For this if started with a normal piece of code like the following.

&lt;br/&gt;
&lt;pre class="brush: java"&gt;  
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; resultMatrix = new ArrayList&amp;lt;&amp;gt;();
        final Random random = new Random();
        for(int anzahlKurven = 0; anzahlKurven &amp;lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; 10; i++) {
                final int nextInt = random.nextInt(100);
                result.add(nextInt);
            }
            resultMatrix.add(result);
        }
        return resultMatrix;
    }

    &lt;/class&gt;&lt;/pre&gt;
Next step would be the creation of two methods...
&lt;br/&gt;
&lt;pre class="brush: java"&gt;  
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for(int anzahlKurven = 0; anzahlKurven &amp;lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&amp;lt;Integer&amp;gt; demoValuesForY = generateDemoValuesForY();
            result.add(demoValuesForY);
        }
        return result;
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY() {
        final Random random = new Random();
        final List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; 10; i++) {
            final int nextInt = random.nextInt(100);
            result.add(nextInt);
        }
        return result;
    }
    &lt;/class&gt;&lt;/pre&gt;
Ok, look´s like always... booooring.... So I started with Streams..
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&amp;gt; {
                    return random.nextInt(100);
                })
                .limit(10)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Not really better.. only new syntax.. now reducing the syntax..
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&amp;gt; random.nextInt(100))
                .limit(10)
                .collect(Collectors.toList());
    }

    &lt;/class&gt;&lt;/pre&gt;
But Random offer something new.
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        return new Random()
                .ints(0, 100)
                .limit(10)
                .boxed()
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Combining both methods..
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final Random random = new Random();
        return Stream.generate(
                    () -&amp;gt; Stream.generate(
                            () -&amp;gt; random.nextInt(100))
                            .limit(10)
                            .collect(Collectors.toList())
                )
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
OK, not short enough.. we could it better..
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream.generate(
                () -&amp;gt; new Random()
                        .ints(0, 100)
                        .limit(10)
                        .boxed()
                        .collect(Collectors.toList())
                ).limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Uuuppsss..  static imports possible.. ;-)
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return generate(() -&amp;gt; new Random()
                .ints(0, 100)
                .limit(10).boxed().collect(toList())
        ).limit(ANZAHL_KURVEN).collect(toList());
    }
    &lt;/class&gt;&lt;/pre&gt;

Now compare with the first  and decide ;-) Streams are cool ? I think so!!

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
