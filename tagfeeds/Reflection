<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Reflection</title>
    <category label="Reflection"/>
    <updated>2014-07-21T13:07:40.137+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 1</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-01-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/01/10/fxcontroller-with-cdi-managed-dynamico.html&gt;FXController with CDI managed DynamicObjectAdapter - Part 1&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-01-10 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
Today I will show the first step how you can use a dynamic proxy for JavaFX Controller.&lt;br/&gt;
This we will need for the CDI support inside TestFX.. but this later..&lt;br/&gt;
&lt;br/&gt;
During I was writing on my reflection shortcut together with Dr. Heinz Kabutz&lt;br/&gt;
(will be first available in german, later in english if asked for) I was thinking about his Newsletter &lt;br/&gt;
about "Object Adapter based on Dynamic Proxy". &lt;br/&gt;
Based on this we will now transform this into an CDI pattern for JavaFX Controller.&lt;br/&gt;
&lt;br/&gt;
The basic target will be an decorator for an CDI environment, to switch between implementations of defined methods&lt;br/&gt;
of an controller. Ok, there is an decorator defined inside the CDI environment but with some hard limitations.&lt;br/&gt;
&lt;br/&gt;
First of all, you have to define the decorator inside the beans.xml. I don´t like this. &lt;br/&gt;
If something will be changed you have to restart the container. And the definition is static.&lt;br/&gt;
The second I not like, is the usage of an decorator. &lt;br/&gt;
&lt;br/&gt;
You have to annotate the class, &lt;br/&gt;
you have to inject the basic implementation&lt;br/&gt;
and you have to extend the basic implementation.  &lt;br/&gt;
&lt;br/&gt;
This is too much and the main disadvantage: you have to decide what decorator to use in the static context.&lt;br/&gt;
&lt;br/&gt;
How to solve this? &lt;br/&gt;
&lt;br/&gt;
Let´s start with the basic step. With the default methods in JDK8 you don´t need a basic Implementation class.&lt;br/&gt;
But you have an interface. Let´s say we have an interface called DemoLogic.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@CDINotMapped
public interface DemoLogic {

    public default int add(int a, int b){
        return a+b;
    }

    public default int sub(int a, int b){
        return a-b;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Importand is the annotation, to exclude this from the default scope inside CDI. You will see it later why..&lt;br/&gt;
&lt;br/&gt;
The next thing we want to have is an special implementation from the add method. This we will implement inside a class &lt;br/&gt;
called DemoLogicAdapter_A.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@CDINotMapped
public class DemoLogicAdapter_A implements DemoLogic{

    public int add(int a, int b){
        System.out.println("DemoLogicAdapter_A.add");
        return a+b + 100;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Same here with the annotation. The good thing is, you really have to implement the changed method only.&lt;br/&gt;
No other delegator stuff.&lt;br/&gt;
&lt;br/&gt;
Next we need, is something to decide dynamically if we want to use the original implementation or the special one.&lt;br/&gt;
This we will simulate with a singleton calles Context. This class with only one boolean attribute called original&lt;br/&gt;
is to simulate a decicion logic.&lt;br/&gt;
If the attribute is true, we are in context original otherwise we are inside the context customer specific.&lt;br/&gt;

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@Singleton
public class Context {

    public boolean original = true;
}
    &lt;/class&gt;&lt;/pre&gt;

Now we will use it like the developer will do it later in a high level way.&lt;br/&gt;
For this we write a jUnit Test to test this.&lt;br/&gt;
The test will do the following.&lt;br/&gt;
Inject the DemoLogic, call the method add and test if the original version was used.&lt;br/&gt;
After this switch the context by setting the attribut original to false.&lt;br/&gt;
Now get the demologic again and call the method add. &lt;br/&gt;
If all is all right we will get the customer specific result.&lt;br/&gt;


&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, "org.rapidpm.commons")
                .addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml");
    }

    @Inject @DynamicDecoratorTest Instance&lt;DemoLogic&gt; demoLogic;
    @Inject Context context;
    @Test
    public void testDemoLogicOriginalTest() throws Exception {
    Assert.assertNotNull(demoLogic);
    final DemoLogic demoLogic1 = demoLogic.get();
    final int add = demoLogic1.add(1, 1);
    Assert.assertEquals(2,add);
    System.out.println("add = " + add);

    context.original = false;
    final DemoLogic demoLogic2 = demoLogic.get();
    final int addAdapted = demoLogic2.add(1, 1);
    Assert.assertEquals(102,addAdapted);
    System.out.println("addAdapted = " + addAdapted);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
I am using arquillian to have CDI support inside my jUnit Tests.&lt;br/&gt;
The annotation DynamicDecoratorTest is to separate this test from the rest of my tests.&lt;br/&gt;
&lt;br/&gt;
You see the usage quite clear. The developer will only see the interface. He will use it like &lt;br/&gt;
he will do it as normal. No change to see! Let´s asume the context switch is done by the system,&lt;br/&gt;
hidden, so the the develper is not able to see it. &lt;br/&gt;
He will write code only with the thinking about the business logic to implement.&lt;br/&gt;
&lt;br/&gt;
Afer we described what we want to have, we will implement the core. &lt;br/&gt;
To get an instance of the DemoLogic, we need a producer. We will call the class DemoLogicProducer.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class DemoLogicProducer {

    @Inject Instance&lt;DynamicObjectAdapterFactory&gt; dynamicObjectAdapterFactoryInstance;

    @Inject Context context;

    @Produces @DynamicDecoratorTest
    public DemoLogic create(ManagedInstanceCreator instanceCreator){
    final DemoLogic demoLogic = instanceCreator.activateCDI(new DemoLogic() {});

    final DynamicObjectAdapterFactory dynamicObjectAdapterFactory = dynamicObjectAdapterFactoryInstance.get();

    final Object adapter;
    if (context.original){
    adapter = new Object();
    } else {
    adapter = instanceCreator.activateCDI(new DemoLogicAdapter_A());
    }

    return dynamicObjectAdapterFactory.adapt(demoLogic, DemoLogic.class, adapter);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
The basic what we are simulating here ist the switch between original and customer specific.&lt;br/&gt;
This will be more comfortable in the next post. (using a ContextResolver)&lt;br/&gt;
But to show the basic step this is made explicite simple.&lt;br/&gt;
If the attribute is true, use the original one otherwise use the customer specific.&lt;br/&gt;
Very simple.. Both instances are manually put inside the CDI environment. &lt;br/&gt;
This ist only to show that the adapter itself can be managed too.&lt;br/&gt;
&lt;br/&gt;
The most importand step is the transparent wrapping with the DynamicObjectAdapterFactory.&lt;br/&gt;
The developer will not see this, until he is debugging ;-)&lt;br/&gt;
&lt;br/&gt;
How this factory is working? &lt;br/&gt;
The factory is using the java.lang.reflect.Proxy from the JDK itself. An old but very usefull class.&lt;br/&gt;
In my case I will use this in side a CDI managed environment. &lt;br/&gt;

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class DynamicObjectAdapterFactory {

    @Inject Instance&lt;CDIInvocationHandler&gt; cdiInvocationHandlerInstance;

    public  &lt;T&gt; T adapt(final Object adaptee,final Class&lt;T&gt; target,final Object adapter) {

        final CDIInvocationHandler invocationHandler = cdiInvocationHandlerInstance
        .get()
        .adapter(adapter)
        .adaptee(adaptee);

        return (T) Proxy.newProxyInstance(
        target.getClassLoader(),
        new Class[]{target},
        invocationHandler
        );
        }

        }
        &lt;/class&gt;&lt;/pre&gt;
This means I will be able to inject, for example, the InvocationHandler. &lt;br/&gt;
This I need, because I need a managed InvocationHandler. &lt;br/&gt;
The usage of the Proxy is nothing complex. But the InvocationHandler is the final and importand step.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class CDIInvocationHandler implements InvocationHandler {

    @Inject @CDILogger Logger logger;

    private Map&lt;MethodIdentifier, Method&gt; adaptedMethods = new HashMap&lt;&gt;();

    private Object adapter;
    private Object adaptee;

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        if (adaptedMethods.isEmpty()){
            final Class&lt;?&gt; adapterClass = adapter.getClass();
            Method[] methods = adapterClass.getDeclaredMethods();
            for (Method m : methods) {
                adaptedMethods.put(new MethodIdentifier(m), m);
            }
        }else{
            if (logger.isDebugEnabled()) {
                logger.debug("adaptedMethods is initialized..");
            }
        }
        try {
            Method other = adaptedMethods.get(new MethodIdentifier(method));
            if (other != null) {
                return other.invoke(adapter, args);
            } else {
                return method.invoke(adaptee, args);
            }
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }

    public CDIInvocationHandler adapter(final Object adapter) {
        this.adapter = adapter;
        return this;
    }

    public CDIInvocationHandler adaptee(final Object adaptee) {
        this.adaptee = adaptee;
        return this;
    }


}

public class MethodIdentifier {
    private final String name;
    private final Class[] parameters;

    public MethodIdentifier(Method m) {
        name = m.getName();
        parameters = m.getParameterTypes();
    }

    // we can save time by assuming that we only compare against
    // other MethodIdentifier objects
    public boolean equals(Object o) {
        MethodIdentifier mid = (MethodIdentifier) o;
        return name.equals(mid.name) &amp;&amp;
                Arrays.equals(parameters, mid.parameters);
    }

    public int hashCode() {
        return name.hashCode();
    }
}

    &lt;/class&gt;&lt;/pre&gt;

The method invoke is called every time a method is called on the proxy. This is the place to decide which method will be called.&lt;br/&gt;
From the adapter we will get all methods and put them inside a HashMap. The key is based on method-name and attributes. &lt;br/&gt;
If a method is called with this key, we will get the adapter instance of this method from the map and &lt;br/&gt;
will call this instead of the original one.&lt;br/&gt;
If not key found, we will call the original nethod.&lt;br/&gt;
This is really simple!&lt;br/&gt;
&lt;br/&gt;
This means you have everywhere CDI managed instances.&lt;br/&gt;
You have only to implement what you whant to change.&lt;br/&gt;
It is dynamic with every request.&lt;br/&gt;
No beans.xml must be edited.&lt;br/&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  &lt;br/&gt;
&lt;br/&gt;
Next step will be the integration iside an JavaFX controller.. and TestFX CDI Support&lt;br/&gt;
&lt;br/&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 2</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-02-07T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/07/fxcontroller-with-cdi-managed-dynamico.html&gt;FXController with CDI managed DynamicObjectAdapter - Part 2&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-07 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
Based on my &lt;a href="http://www.rapidpm.org/2014/01/fxcontroller-with-cdi-managed.html"&gt;blog article part 1&lt;/a&gt; we want to integrate the DynamicObjectAdapter into an JavaFX application.
To remember: We have an interface called DemoLogic with two methods. add(..) and sub(..)
The implementation is really simple, but at runtime we could switch the implementation partially.
For this we needed an adapter.
&lt;br/&gt;
The biggest tdifference compared to the default CDI decorator was,
that we need no definition inside the beans.xml. The implementation is smaller
and no need for Qualifiers and other biolder-plate code.
&lt;br/&gt;
This DemoLogic we want to use now inside an JavaFX application.
For this we ned first an fxml.file called DemoPane.fxml. Here we will define a few elements.

&lt;br /&gt;
&lt;pre class="brush: javafx"&gt;
&amp;lt;?import javafx.scene.control.Button?&amp;gt;
&amp;lt;?import javafx.scene.control.TextField?&amp;gt;
&amp;lt;?import javafx.scene.layout.VBox?&amp;gt;
&amp;lt;?import javafx.scene.control.Label?&amp;gt;
&amp;lt;?import javafx.scene.control.CheckBox?&amp;gt;
&amp;lt;fx:root type=&amp;quot;javafx.scene.layout.AnchorPane&amp;quot;
            xmlns:fx=&amp;quot;http://javafx.com/fxml&amp;quot;&amp;gt;
    &amp;lt;children&amp;gt;
        &amp;lt;VBox&amp;gt;
            &amp;lt;children&amp;gt;
                &amp;lt;Button fx:id=&amp;quot;button&amp;quot; text=&amp;quot;Hello World&amp;quot; /&amp;gt;
                &amp;lt;CheckBox fx:id=&amp;quot;checkbox&amp;quot; text=&amp;quot;switch context&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldA&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldB&amp;quot;/&amp;gt;
                &amp;lt;Label fx:id=&amp;quot;label&amp;quot;/&amp;gt;
            &amp;lt;/children&amp;gt;
        &amp;lt;/VBox&amp;gt;

    &amp;lt;/children&amp;gt;

&amp;lt;/fx:root&amp;gt;
    &lt;/class&gt;&lt;/pre&gt;

With the button we will activate the calculation, with the checkbox we will switch the context.
To have a small as possible implementation, there is no error checking.
&lt;br/&gt;
The next will be the controller called DemoController. This is a normal JavaFX Controller, but CDI managed.
How to get this? Well there is a good blog article here ;-) &lt;a href="http://www.rapidpm.org/2013/08/javafxcdi-bootstrap-add-on.html"&gt;CDI JavaFX bootstrapping&lt;/a&gt;.
&lt;br/&gt;
Inside the DemoController we will get an Instance of the DemoLogic and the Context.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;
    &lt;/class&gt;&lt;/pre&gt;

The full implementation will be like the following.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@DynamicDecoratorTest
public class DemoController implements Initializable{

    @FXML public TextField textFieldA;
    @FXML public TextField textFieldB;
    @FXML public Button button;
    @FXML public Label label;
    @FXML public CheckBox checkbox;

    @Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        button.setText(&amp;quot;klick me&amp;quot;);
        button.setOnAction(actionEvent -&amp;gt; {

            final DemoLogic demoLogic = demoLogicInstance.get();

            final String textFieldAText = textFieldA.getText();
            final Integer a = Integer.valueOf(textFieldAText);

            final String textFieldBText = textFieldB.getText();
            final Integer b = Integer.valueOf(textFieldBText);

            final int result = demoLogic.add(a, b);
            label.setText(result+&amp;quot;&amp;quot;);

        });

        checkbox.setOnAction(actionEvent -&amp;gt; {
            context.original = checkbox.isSelected();
        });
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Inside the method initialize you will find the connection between the GUI logic and the business logic.
This is now clean devided.
&lt;br/&gt;
To test this I was using Arquillian. LAter we will see how we could do this with TestFX.
We are working on the CDI Support.

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, &amp;quot;org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;junit.org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;demo&amp;quot;)
                .addAsManifestResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);
    }

    @Inject @DynamicDecoratorTest
    Instance&amp;lt;DemoController&amp;gt; demoControllerInstance;
    @Inject
    Context context;

    static final FXMLLoader loader = new FXMLLoader();

    @Test
    public void testDemoLogicJavaFXTest() throws Exception {
        loader.setControllerFactory(param -&amp;gt; demoControllerInstance.get());
        Application.launch(DemoApp.class);
    }


    public static class DemoApp extends Application {
        @Override
        public void start(Stage stage) throws Exception {

            final URL resource = getClass()
                    .getClassLoader()
                    .getResource(&amp;quot;DemoPane.fxml&amp;quot;);
            loader.setLocation(resource);
            final DemoController controller = (DemoController) loader
                    .getControllerFactory()
                    .call(DemoController.class);
            try {

                loader.setController(controller);
                loader.setRoot(new AnchorPane());
                final Parent root = (Parent) loader.load();

                stage.setScene(new Scene(root));
                stage.setTitle(&amp;quot;Custom Control&amp;quot;);
                stage.setWidth(300);
                stage.setHeight(200);
                stage.show();
            } catch (IOException exception) {
                throw new RuntimeException(exception);
            }

        }

        public static void main(String[] args) {
            launch(args);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  
&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>are you missing the ? operator from project coin?</title>
        <category label="Core Java"/>
        <category label="Proxy"/>
        <category label="Reflection"/>
        <published>2014-02-20T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/20/are-you-missing-the-operator-from-proj.html&gt;are you missing the ? operator from project coin?&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-20 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
How to get rid of 90% boiler plate code from NPE-save model - surfing?
&lt;br/&gt;
What I am meaning with modell surfing?
For example you have a class DemoClassA.&lt;br/&gt;
Inside DemoClassA you have an instance of DemoClassB.&lt;br/&gt;
Inside DemoClassB you have an instance of DemoClassC. And so on..&lt;br/&gt;
&lt;br/&gt;
You need something like the following.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
String value = demoClassA.getDemoClassB().getDemoClassC().getValue();
    &lt;/class&gt;&lt;/pre&gt;
The bad thing is if your valid model could have ClassB or ClassC with null.
You only have to show the value inside your GUI if the complete getter - cascade will be valid.
The first would be something like this.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class="brush: java"&gt;  
 DemoClassB valueB = demoClassA.getDemoClassB();
 if(demoB != null){
    DemoClassC demoC = demoB.getDemoClassC();
    if(demoC != null){
     String value = demoC.getValue();
    }
 }
    &lt;/class&gt;&lt;/pre&gt;
A lot of booooring code. Project Coin had something with Wildcards.
&lt;br/&gt;
&lt;pre class="brush: java"&gt; 
 String value = demoClassA?.getDemoClassB()?.getDemoClassC()?.getValue();
    &lt;/class&gt;&lt;/pre&gt;
This is really nice, but it was not accepted. So I had do something like this for myself.
&lt;br/&gt;
One main point will be that the objects are ready initialized and I could not change the source code from this part.
Other languages as plain Java are not allowed.
No other frameworks, no AOP and something like this.
Puuhh.. what else?
&lt;br/&gt;
I was thinking about the newsletter nr 180 (&lt;a href="http://www.javaspecialists.eu/archive/Issue180.html"&gt;http://www.javaspecialists.eu/archive/Issue180.html&lt;/a&gt;) from Heinz Kabutz.
He explained how to generate static Proxy Classes. This was a good point to start from.
&lt;br/&gt;
The key concept is the generating of Proxy Classes on the fly if they are needed. Via Reflection the real Subject is analysed and the Proxy generated. He is instanciating the new proxy class and the real subject with the default constructor. For my project this was not helpfull, because the model was grown over the last 10 years. Nearly no default constructor is available and the project owner was building something like a RMI Lazy Loading inside the persistent model. This model itself is used directly inside Swing.. hmmmmm  nothing was I really want to use... &lt;br/&gt;
Changing the old code is very time consuming. &lt;br/&gt;
On the other side I was writing a lot of this if != null code. &lt;br/&gt;
So I decided to write a Proxy that I can use on initialized objects. This must be recursive to get the NPE save getter cascades.
Based on Heinz code, I started to write a &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject &lt;/b&gt;to stop the instance creation on the real Subject.
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
public class VirtualProxySourceGeneratorOnExistingObject extends VirtualProxySourceGenerator {

    public VirtualProxySourceGeneratorOnExistingObject(
            Class subject, Class realSubject) {
        super(subject, realSubject, Concurrency.OnExistingObject);
    }
    protected void addRealSubjectCreation(PrintWriter out,  String name, String realName) {
        out.printf(" public %s realSubject;%n", name);
        out.println();
        out.printf(" private %s realSubject() {%n", name);
        out.println(" return realSubject;");
        out.println(" }");
    }
}
    &lt;/class&gt;&lt;/pre&gt;
After this I changed the &lt;b&gt;VirtualProxySourceGenerator&lt;/b&gt;to use this &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject&lt;/b&gt; and changed it in a way that a getter method will generate a new Proxy for the next realSubject.
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
public abstract class VirtualProxySourceGenerator {

    protected final Class subject;
    protected final Class realSubject;
    private final String proxy;
    private CharSequence charSequence;
    private Concurrency type;

    public VirtualProxySourceGenerator(
            Class subject, Class realSubject, Concurrency type) {
        this.subject = subject;
        this.realSubject = realSubject;
        this.type = type;
        this.proxy = makeProxyName(subject, type);

    }

    private static String makeProxyName(Class subject, Concurrency type) {
        return "$$_" + subject.getName().replace('.', '_') +
                "Proxy_" + Integer.toHexString(System.identityHashCode(
                subject.getClassLoader())) + "_" + type;
    }

    public String getProxyName() {
        return proxy;
    }

    public CharSequence getCharSequence() {
        if (charSequence == null) {
            StringWriter sw = new StringWriter();
            generateProxyClass(new PrintWriter(sw));
            charSequence = sw.getBuffer();
        }
        //System.out.println("charSequence = " + charSequence.toString());
        return charSequence;
    }

    private void generateProxyClass(PrintWriter out) {
        addClassDefinition(out);
        addProxyBody(out);
        out.close();
    }

    private void addProxyBody(PrintWriter out) {
        addRealSubjectCreation(out, subject.getName(), realSubject.getName());
        addProxiedMethods(out);
        out.println("}");
    }

    protected abstract void addRealSubjectCreation(PrintWriter out, String name, String realName);


    private void addClassDefinition(PrintWriter out) {
        addImports(out);
        out.printf("public class %s %s %s {%n",
                proxy, getInheritanceType(subject), subject.getName());
    }

    private String getInheritanceType(Class subject) {
        return subject.isInterface() ? "implements" : "extends";
    }

    protected void addImports(PrintWriter out) {

    }

    private void addToStringIfInterface(PrintWriter out) {
        if (subject.isInterface()) {
            out.println();
            out.println(" public String toString() {");
            out.println(" if(realSubject() == null ) return \"NullObjectHolder in \" + this.getClass() ;");
            out.println(" return realSubject().toString();");
            out.println(" }");
        }
    }

    private void addProxiedMethods(PrintWriter out) {
        for (Method m : subject.getMethods()) {
            addProxiedMethod(out, m);
        }
        addToStringIfInterface(out);
    }

    private void addProxiedMethod(PrintWriter out, Method m) {
        if (Modifier.isFinal(m.getModifiers())) return;
        addMethodSignature(out, m);
        addMethodBody(out, m);   //NPE da val ger getter gefuellt wird

        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf(");%n }%n");
        else {
            out.printf(");%n");  //end of orig method.. start proxy additional stuff
            final boolean aFinal = Modifier.isFinal(returnType.getModifiers());
            if (!returnType.isPrimitive() &amp;&amp; !returnType.isArray() &amp;&amp; ! aFinal ){
                final String typeName = returnType.getTypeName();
                final String proxyGenerator = "org.rapidpm.module.se.commons.proxy.ProxyGenerator";
                final String concurrency = "org.rapidpm.module.se.commons.proxy.Concurrency";
                out.printf(" if (val == null) { System.out.println(\" val == null for method  + " +m.getName()+ "\");} %n");
                out.printf(typeName + " proxyObj = " + proxyGenerator+ ".make("+typeName+".class, "+typeName+".class, " +concurrency+"."+type.toString()+"); %n");

                if (type.equals(Concurrency.OnExistingObject)){
                    out.printf("try { %n");
                    out.printf("    proxyObj.getClass().getDeclaredField(\"realSubject\").set(proxyObj, val);  %n");
                    out.printf("} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {  %n");
                    out.printf("    e.printStackTrace(); %n");
                    out.printf("}  %n");
                }
                out.printf(" return proxyObj; %n");
            } else {
                out.printf(" return val; %n");
            }
                out.printf("%n}%n");
        }
    }

    private void addMethodSignature(PrintWriter out, Method m) {
        out.printf("%n public %s", Util.prettyPrint(m.getReturnType()));
        out.printf(" %s(", m.getName());
        addParameterList(out, m);
        out.printf(") {%n ");
    }

    private void addParameterList(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? "" : ", ";
            out.printf("%s p%d%s", Util.prettyPrint(types[i]), i, next);
        }
    }

    private void addMethodBody(PrintWriter out, Method m) {
        addMethodBodyDelegatingToRealSubject(out, m);
    }

    private void addMethodBodyDelegatingToRealSubject(PrintWriter out, Method m) {
        //hole result
        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf("realSubject().%s(", m.getName());
        else if(m.getName().equals("toString")){
            out.println("String val;");
            out.println(" if(realSubject() == null ) val = \"NullObjectHolder in \" + this.getClass() ; ");
            out.printf(" else val = realSubject().%s(", m.getName());
        } else if(m.getName().startsWith("get") &amp;&amp; ! returnType.isPrimitive()){
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + " val;");
            out.println(" if(realSubject() == null ) val = null ; ");
            out.printf(" else val = realSubject().%s(", m.getName());   
        } else {
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + " val;");
            out.printf("val = realSubject().%s(", m.getName());  

        }
        addMethodCall(out, m);
    }

    private void addMethodCall(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? "" : ", ";
            out.printf("p%d%s", i, next);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
The result is really cool. see the following code ;-)
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
       DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println("value = " + value);
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;

You can navigate the full path. no NPE! No boiler plate code!

&lt;pre class="brush: java"&gt;
@Test
    public void testGenerator00X() throws  Exception {
        DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println("value = " + value);

    }

private DemoClassA proxy(DemoClassA demoClassA) {
        final Class&amp;lt;DemoClassA&amp;gt; aClass = (Class&amp;lt;DemoClassA&amp;gt;) demoClassA.getClass();
        final DemoClassA demo = ProxyGenerator.make(aClass, aClass, Concurrency.OnExistingObject);

        final Class&amp;lt;? extends DemoClassA&amp;gt; aClassProxy = demo.getClass();
        try {
            aClassProxy.getDeclaredField(&amp;quot;realSubject&amp;quot;).set(demo,demoClassA );
        } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {
            e.printStackTrace();
        }
        return demo;
    }
    &lt;/class&gt;&lt;/pre&gt;
You can now use every getter.. not NPE. Only the result will be an null. This was exactly what I needed to get only the valid values from the model if they are available.
This means, that you could proxy an object after you have initialized it.
The full source code is available under : &lt;a href="https://bitbucket.org/rapidpm/modules"&gt;https://bitbucket.org/rapidpm/modules&lt;/a&gt; on the develop branch. I will merge it into the version 2.0 as generic pattern and CDI managed...




&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
