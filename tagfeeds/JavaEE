<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JavaEE</title>
    <category label="JavaEE"/>
    <updated>2015-04-20T22:40:15.192+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <author>
        <name>Oliver Milke</name>
    </author>
    <entry>
        <title>Wildfly/JBoss: How to secure customer passwords</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-02-28T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/02/28/wildfly-jboss--how-to-secure-customer-.html&gt;Wildfly/JBoss: How to secure customer passwords&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-02-28 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
    If you are familiar with Wildfly/JBoss you might now that you can easily configure your system to use JAAS database authentication  for the login process of your customer. Because it is considered bad practice to store passwords in clear text a hash-algorithm (e.g. SHA256, MD5) can be specified to encrypt them. Further informations can be found under&amp;nbsp;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Security+subsystem+configuration"&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    The problem with that approach is that your passwords will be vulnerable to dictionary and rainbowtable attacks (refresh your knowlegde&amp;nbsp;&lt;a href="http://netsecurity.about.com/od/hackertools/a/Rainbow-Tables.htm"&gt;here&lt;/a&gt;).&lt;/div&gt;
&lt;div&gt;
    One way to face this problem is to use salted hashed passwords but the standard DatabaseServerLoginModule does not support that. But you can use &lt;a href="http://www.rtner.de/software/PBKDF2.html"&gt;this&lt;/a&gt;&amp;nbsp;extension of the DatabaseServerLoginModule.&lt;/div&gt;
&lt;div&gt;
    The configuration is fairly easy:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
    Wildfly/JBoss Konfiguration&lt;/h3&gt;
&lt;div&gt;
    &lt;b&gt;1&lt;/b&gt;. Create module&lt;/div&gt;
&lt;div&gt;
    Create the new module de.rtner.security.main and configure the module.xml like this&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;module xmlns="urn:jboss:module:1.1" name="de.rtner.security"&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource-root path="PBKDF2-1.0.4.jar"/&amp;gt;
        &amp;lt;resource-root path="SaltedDatabaseLoginModule-1.0.4.jar"/&amp;gt;
    &amp;lt;/resources&amp;gt;
   &amp;lt;dependencies&amp;gt;
        &amp;lt;module name="javax.api"/&amp;gt;
        &amp;lt;module name="javax.servlet.api"/&amp;gt;
        &amp;lt;module name="org.jboss.as.web-common"/&amp;gt;
        &amp;lt;module name="org.jboss.logging"/&amp;gt;
        &amp;lt;module name="org.picketbox"/&amp;gt;
        &amp;lt;module name="sun.jdk"/&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/module&amp;gt;&lt;/pre&gt;
    Both declared jars must also be present in that folder.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;2&lt;/b&gt;. Update module.xml of picketbox.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    Every custom login module has to be declared as a dependencies in the module.xml of picketbox. So just add this line:&lt;br /&gt;
    &lt;pre&gt;&amp;lt;module name="de.rtner.security"/&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;3&lt;/b&gt;. Update standalone.xml&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;login-module code="de.rtner.security.auth.spi.SaltedDatabaseServerLoginModule" flag="required" module="de.rtner.security"&amp;gt;
 &amp;lt;module-option name="dsJndiName" value="java:jboss/datasources/ExampleDS"/&amp;gt;
 &amp;lt;module-option name="principalsQuery" value="select password from User where login=?"/&amp;gt;
 &amp;lt;module-option name="rolesQuery" value="select role, 'Roles' from UserRole where login=?"/&amp;gt;
 &amp;lt;module-option name="hmacAlgorithm" value="HMacSHA256"/&amp;gt;
 &amp;lt;module-option name="formatter" value="de.rtner.security.auth.spi.PBKDF2HexFormatter"/&amp;gt;
 &amp;lt;module-option name="engine" value="de.rtner.security.auth.spi.PBKDF2Engine"/&amp;gt;
 &amp;lt;module-option name="engine-parameters" value="de.rtner.security.auth.spi.PBKDF2Parameters"/&amp;gt;
&amp;lt;/login-module&amp;gt;&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
The password encryption can be done with the following function.
&lt;br /&gt;
&lt;div&gt;
&lt;pre class="brush: java"&gt;private String createPbKdF2Passwort(String password) throws NoSuchAlgorithmException
{
 PBKDF2Formatter formatter = new PBKDF2HexFormatter();
 SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
 byte[] salt = new byte[8];
 sr.nextBytes(salt);
 int iterations = 1000;
 PBKDF2Parameters p = new PBKDF2Parameters("HmacSHA256", "ISO-8859-1", salt, iterations);
 PBKDF2Engine e = new PBKDF2Engine(p);
 p.setDerivedKey(e.deriveKey(password));
 return formatter.toString(p);
}&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Have fun coding.&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>PBKDF2 1.1.0 is now available</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-10-15T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/10/15/pbkdf2-1.1.0-is-now-available.html&gt;PBKDF2 1.1.0 is now available&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-10-15 from &lt;a href="/team/alexander-bischof/"&gt;Alexander Bischof&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
        This article gives a short overview over the newest features of the PBKDF2 implementation from Matthias Gaertner. If you don't know what it is and
        what it does no problem. You can read here more about it &lt;a href="http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html"&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;
    &lt;br /&gt;&lt;br/&gt;
    &lt;h2&gt;What is new and noteworthy?&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Fixed warnings on Wildfly 8 due to old picketbox dependency&lt;/li&gt;
            &lt;li&gt;Uploaded to &lt;b&gt;Maven Central&lt;/b&gt;&lt;/li&gt;
            &lt;li&gt;Usage of CI with Travis CI&lt;/li&gt;
            &lt;li&gt;Added more Tests&lt;/li&gt;
            &lt;li&gt;Added sample web application for Wildfly 8 Integration&lt;/li&gt;
            &lt;li&gt;Added more documentation&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        One of the major improvements of this release is the internal refactoring from direct dependencies to gradle so that there is now a much better dependency
        management possible (e.g. Older versions, for example 1.0.5, had problems with newer picketbox versions of Wildfly 8 which lead to log warnings and were not convincing).
        On top of that it was now possible to upload the artefact to maven central:

&lt;pre class="brush: xml"&gt;
&lt;dependency&gt;
   &lt;groupId&gt;de.rtner&lt;/groupId&gt;
   &lt;artifactId&gt;PBKDF2&lt;/artifactId&gt;
   &lt;version&gt;1.1.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;/pre&gt;

        &lt;br/&gt;
        Please let us know if you encounter any issues, or have any feedback on usability, at &lt;a href="https://github.com/m9aertner/PBKDF2"&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;.
    &lt;/div&gt;
&lt;br/&gt;
    &lt;h2&gt;Read more about PBKDF2&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href="http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html"&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="https://github.com/m9aertner/PBKDF2"&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md"&gt;https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;</content>
        <summary>This article informs you about the new changes</summary>
    </entry>
    <entry>
        <title>EJB Transaction Rollback and Timers</title>
        <category label="Java"/>
        <category label="JavaEE"/>
        <category label="EJB"/>
        <category label="Glassfish"/>
        <published>2015-02-08T00:00:00+01:00</published>
        <author>
            <name>Oliver Milke</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2015/02/08/ejb-transaction-rollback-and-timers.html&gt;EJB Transaction Rollback and Timers&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2015-02-08 from &lt;a href="/team/oliver-milke/"&gt;Oliver Milke&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
    &lt;!-- first paragraph is bla bla --&gt;
&lt;p&gt;Today I was a little confused when a colleague of mine tried to explain to me the transaction control directives our application depends on. The tough part was to consider all the
    possible rollback scenarios. To get more insight into rollback behaviour, I created a simple demo project.&lt;/p&gt;
&lt;p&gt;The project can be found on &lt;a href="https://github.com/omilke/ta-demo"&gt;github&lt;/a&gt;. It demonstrates all possible cases I could think of with respect to transaction rollback
    and programmatic timer manipulation. I have added TODO markers in places you choose between different scenarios. I also added a comment on what is expected to happen and why.
&lt;p&gt;It works with glassfish 3.2 and 4.1. Feel free to try it out and please share your thoughts. Please keep in mind, however, this project
    was primarily designed to run on both versions of glassfish.&lt;/p&gt;
&lt;p&gt;The specification (JSR-318 - EJB 3.1) can found at the &lt;a href="https://jcp.org/aboutJava/communityprocess/final/jsr318/index.html"&gt;JCP site&lt;/a&gt;. I added
    references to specification, which relate to this document.&lt;/p&gt;

&lt;h2&gt;EJB Transaction Rollback - When does it happen?&lt;/h2&gt;
&lt;p&gt;My primitive assumption was, that if the method that spans a transaction (e. g. by declaring &lt;code&gt;TransactionAttribute.REQUIRES_NEW&lt;/code&gt;) terminates with an exception,
    the associated transaction must be rolled back. However, this is not necessarily true.&lt;/p&gt;
&lt;p&gt;Actually it depends on the type of the exception. Transactions only rollback if the exception being thrown is marked for rollback (cf. chapter 14.3.1, Table 15).&lt;/p&gt;
&lt;p&gt;By the default, all checked exceptions are marked as &lt;code&gt;rollback=false&lt;/code&gt;, whereas the unchecked exception are marked as &lt;code&gt;rollback=true&lt;/code&gt;.
    You can explicitly specify rollback behaviour on exceptions with &lt;code&gt;@ApplicationException(rollback = true / false)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have an EJB that uses another EJB injected via @EJB / @Inject and the invoked method executes of the same transaction (e. g. because of
    &lt;code&gt;TransactionAttribut.REQUIRED)&lt;/code&gt;, this method can also induce a rollback of the transaction if it throws an appropriate exception.&lt;/p&gt;
&lt;p&gt;This means a business method may throw an exception and have the transaction committed at the same time. Conversely, by using another EJB a transaction can be
    rolled back even if you catch its exception. Both of these cases are shown in the demo project.&lt;/p&gt;

&lt;h2&gt;EJB Transaction Rollback and timers&lt;/h2&gt;

&lt;p&gt;Transaction rollback also influences timeout methods (i. e. methods annotated with &lt;code&gt;@Schedule&lt;/code&gt; / &lt;code&gt;@Timeout&lt;/code&gt;). If the transaction used for a timeout method shall
    be rolled back, it is required by the specification, that the method invocation will be retried at least once (cf. chapter 18.4.3). Glassfish retries the invocation 5 seconds later. However,
    if the second invocation induces a rollback as well, the timer will be expunged. That means you will loose all future invocation of that timer.&lt;/p&gt;
&lt;p&gt;The specification actually disallows timeout methods to throw application exceptions (cf. chapter 18.2.5.3), however glassfish can cope with that. Timeout method invocation is retried if either
    the method throws an exception or the associated transaction is marked for rollback. A timeout method can also have a committed transaction even though it throws an exception.
    However, since this is not allowed by the spec, its behaviour is specific to the application server in use.&lt;/p&gt;
&lt;p&gt;For glassfish, retrying timeouts and expunging timer can be configured in the admin interface (&lt;a href="http://www.rapidpm.org/2015/02/08/timerconfig.png"&gt;screenshot&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Programmatic manipulations of timers with the help of &lt;code&gt;@Resource TimerService&lt;/code&gt; are also subject to transaction rollback (cf. chapter 18.2.8). Therefore registering a new
    &lt;code&gt;@Timeout&lt;/code&gt; or cancelling and an existing &lt;code&gt;Timer&lt;/code&gt; will also be reverted of the corresponding transaction is rolled back.&lt;/p&gt;
&lt;/div&gt;</content>
        <summary></summary>
    </entry>
</feed>
