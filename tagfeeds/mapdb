<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>mapdb</title>
    <category label="mapdb"/>
    <updated>2014-07-21T21:24:53.701+02:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>Big data collections with MapDB</title>
        <category label="java"/>
        <category label="javafx"/>
        <category label="mapdb"/>
        <published>2014-06-11T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;div class="blog-post"&gt;
&lt;h2 class="blog-post-title"&gt;&lt;a href=/2014/06/11/big-data-collections-with-mapdb.html&gt;Big data collections with MapDB&lt;/a&gt;&lt;/h2&gt;
&lt;p class="blog-post-meta"&gt;2014-06-11 from &lt;a href="/team/sven-ruppert/"&gt;Sven Ruppert&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
    &lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
        This article gives a short overview over the open source software&amp;nbsp;&lt;a href="http://www.mapdb.org/"&gt;MapDB&lt;/a&gt;&amp;nbsp;which is now in version 1.0.3.&lt;/div&gt;
    &lt;br /&gt;
    &lt;h4 style="font-family: Helvetica; font-size: 13px;"&gt;
        What is MapDB?&lt;/h4&gt;
    &lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
        Original designed as a storage engine for an astronomical desktop application it had two design goals &lt;b&gt;minimal overhead&lt;/b&gt; and &lt;b&gt;simplicity&lt;/b&gt;. Over the time the engine had evolved and the third goal &lt;b&gt;provide an alternative Java memory model&lt;/b&gt;&amp;nbsp;was added. So now it is a storage engine which is specialized for big data collections and for that has some cool features.&lt;br /&gt;
        For example:&lt;/div&gt;
    &lt;ul style="font-family: Helvetica; font-size: 12.727272033691406px;"&gt;
        &lt;li&gt;Write to Heap, OffHeap, File or TempFile&lt;/li&gt;
        &lt;li&gt;Synchronization of Maps/TreeMaps/Sets and Queues&amp;nbsp;&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Maps can also be build with composite keys&lt;/li&gt;
            &lt;li&gt;bidirectional maps&lt;/li&gt;
            &lt;li&gt;synchronization between maps (in case you have a 1-N association)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Caching&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;expiration on disk usage, access or write time&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Compression&lt;/li&gt;
        &lt;li&gt;Faceting aka Histogram&lt;/li&gt;
        &lt;li&gt;Simulated Auto-Increment&lt;/li&gt;
        &lt;li&gt;Transactions (Note: a single transaction can only be used once)&lt;/li&gt;
        &lt;li&gt;Querying&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h4&gt;
        Small Example&lt;/h4&gt;
    The following example shows the simplicy in the context of IoT where i put 10 million temperature values into a collection which is backed by an off-heap and group the values into five groups (cold, fresh, warm, hot and burns). For filling the cache i also use auto increment.&lt;/div&gt;
&lt;pre class="brush: java"&gt;
    public class TemperatureRepository {
    private final Atomic.Long keyinc;
    private ConcurrentHashMap&amp;lt;String, Long&amp;gt; histogram;
    private HTreeMap&amp;lt;Long, Integer&amp;gt; temperatureMap;

    public TemperatureRepository() {
        //Create off-heap memory cache
        temperatureMap = DBMaker.newCache(1.0);

        //Get Autoincrement counter
        DB db = new DB(temperatureMap.getEngine());
        keyinc = db.getAtomicLong("map_temp");

        // histogram, category is a key, count is a value
        histogram = new ConcurrentHashMap&amp;lt;String, Long&amp;gt;(); //any map will do

        // bind histogram to primary map
        // we need function which returns category for each map entry
        Bind.histogram(temperatureMap, histogram, (key, value) -&amp;gt; {
            String ret = null;

            if (value &amp;lt; 0) {
                ret = "cold";
            } else if (value &amp;lt; 10) {
                ret = "fresh";
            } else if (value &amp;lt; 20) {
                ret = "warm";
            } else if (value &amp;lt; 30) {
                ret = "hot";
            } else {
                ret = "burns";
            }
            return ret;
        });
    }

    public void add(int temperature) {
        temperatureMap.put(keyinc.incrementAndGet(), temperature);
    }

    public void printHistogram() {
        System.out.println(histogram);
    }

    public static void main(String[] args) {
        TemperatureRepository temperatureRepository = new TemperatureRepository();
        new Random().ints(-10,40).parallel().limit(1_000_000).forEach(e-&amp;gt; temperatureRepository.add(e));
        temperatureRepository.printHistogram();
    }
}
&lt;/pre&gt;
&lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
    &lt;br /&gt;
    &lt;h4&gt;
        Fazit&lt;/h4&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
    Until now i had not the chance to use MapDB in a productive environment but on our playground at&amp;nbsp;&lt;a href="http://www.rapidpm.org/"&gt;www.rapidpm.org&lt;/a&gt;&amp;nbsp;it makes a very good impression.&lt;/div&gt;
&lt;div style="font-family: Helvetica; font-size: 13px;"&gt;
    &lt;ul class="Apple-dash-list"&gt;

    &lt;/ul&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
